{"version":3,"file":"static/js/7579.a2f270a4.chunk.js","mappings":"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","sources":["components/Game2/Key2.js","components/Game2/Keyboard2.js","components/Game2/Spacebar2.js"],"sourcesContent":["import React, { useContext } from 'react'\nimport { Keyboard2Context } from './Keyboard2';\nimport { GoDotFill } from '../IconModule';\n\nfunction Key({ keyVal, blank, black, clickableKey, add, keyLine }) {\n  const { addNumber, removeNumber } = useContext(Keyboard2Context);\n  const selectLetter = () => {\n    if (clickableKey) {\n      if (add) {\n        addNumber(keyVal);\n      } else {\n        removeNumber()\n      }\n    }\n  };\n\n  let iconComponent = null;\n\n  if (keyLine === 1 && keyVal === \"\") {\n    iconComponent = <GoDotFill />;\n  } else {\n    iconComponent = keyVal;\n  }\n\n  return (\n      <div className={ blank ? 'key blank_key default_cursor' :  black ? 'key factors_key' : 'key'} onClick={selectLetter}>\n        {iconComponent}\n      </div>\n    )\n}\n\nexport default Key","import React, { useCallback, useContext, useEffect, useState, createContext } from 'react';\nimport { AppContext } from '../../App';\nimport { useKeydownEffect } from '../../utils';\nimport Key from './Key2';\nimport Spacebar from './Spacebar2';\nimport { BiSolidLeftArrowAlt, BiSolidRightArrowAlt } from 'react-icons/bi';\n\nexport const Keyboard2Context = createContext();\n\nfunction Keyboard2() {\n    const { setGameChosen, keysColor, setKeysColor } = useContext(AppContext);\n    const [keys0, setKeys0] = useState([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]);\n    const [keys1, setKeys1] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n    const [keys2, setKeys2] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n    const [totalFactors, setTotalFactors] = useState(0)\n    const [factorsList, setFactorsList] = useState([])\n    const [factorsFive, setFactorsFive] = useState([])\n    const shouldIncludeEllipsisBefore = !factorsList.includes(10);\n    const shouldIncludeEllipsisAfter = !factorsList.includes(49);\n\n    // const totals = [\n    //     \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\n    //     \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\",\n    //     \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\",\n    //     \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\",\n    //   ];\n\n    // const textColors = {\n    //     1: \"#7dd7ff\",\n    //     2: \"#23a7fa\",\n    //     3: \"#999\",\n    //     4: \"#555\"\n    // }\n\n    const fauxKeys1 = [\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"];\n\n    const [symbolResponse, setSymbolResponse] = useState(\"\")\n\n    const arrowStyles = {\n        color: \"#7dd7ff\",\n        fontSize: '30px',\n        position: 'relative',\n        top: '8px',\n    };\n\n    const addNumber = (key) => {\n        let updatedKeys0 = [...keys0];\n        let updatedKeys1 = [...keys1];\n        let updatedKeys2 = [...keys2];\n        let updatedFactorTotal = totalFactors;\n        let numbersEnteredBefore = keys0.filter((val) => val === \"\").length;\n        if (keys0.includes(key)) {\n            const emptyIndex1 = updatedKeys1.findIndex((val) => val === '');\n            const emptyIndex0 = updatedKeys0.findIndex((val) => val === key);\n            if (emptyIndex1 >= 0) {\n                updatedKeys1[emptyIndex1] = key; \n                updatedKeys0[emptyIndex0] = '';  \n                setKeys1(updatedKeys1);\n                setKeys0(updatedKeys0);\n            }\n        }\n            if (numbersEnteredBefore % 2 === 1) {\n                const emptyIndex1 = updatedKeys1.findIndex((val) => val === '');\n                const emptyIndex2 = updatedKeys2.findIndex((val) => val === '');\n                let joinedStrings = '';\n                if (emptyIndex1 !== -1) {\n                    joinedStrings = updatedKeys1.slice(emptyIndex1 - 2, emptyIndex1).join('');\n                } else if (emptyIndex1 === -1) {\n                    joinedStrings = updatedKeys1.slice(-2).join('');\n                }\n                const resultingInteger = parseInt(joinedStrings, 10);\n                const newFactorArray = findFactors(resultingInteger);\n                const newFactorTotal = newFactorArray.length;\n                updatedFactorTotal += newFactorTotal;\n                if (emptyIndex1 === 2) {\n                    updatedKeys2[emptyIndex2] = newFactorTotal;\n                    setKeys2(updatedKeys2);\n                } else if (emptyIndex1 > 2 && emptyIndex1 < updatedKeys1.length) {\n                    updatedKeys2[emptyIndex2] = '+';\n                    updatedKeys2[emptyIndex2 + 1] = newFactorTotal;\n                    setKeys2(updatedKeys2);\n                } else if (emptyIndex1 === -1) {\n                    updatedKeys2[7] = '+';\n                    updatedKeys2[8] = newFactorTotal;\n                    setKeys2(updatedKeys2);\n                }\n                setTotalFactors(updatedFactorTotal)\n                setFactorsFive(prevFactorsFive => [...prevFactorsFive, newFactorArray])\n        }\n        \n    }\n    const removeNumber = () => {\n        let updatedKeys0 = [...keys0];\n        let updatedKeys1 = [...keys1];\n        let updatedKeys2 = [...keys2];\n        let updatedFactorTotal = totalFactors\n        let numbersEntered = keys0.filter((val) => val === \"\").length;\n        const emptyIndex1 = updatedKeys1.findIndex((val) => val === '');\n            if (emptyIndex1 > 0 && emptyIndex1 < 10) {\n                const returnIndex = parseInt(updatedKeys1[emptyIndex1 - 1])\n                const returnNumberString = updatedKeys1[emptyIndex1 - 1];\n                updatedKeys1[emptyIndex1 - 1] = '';\n                updatedKeys0[(returnIndex + 9) % 10] = returnNumberString;\n            } else if (emptyIndex1 === -1) {\n                const returnIndex = parseInt(updatedKeys1[9])\n                const returnNumberString = updatedKeys1[9];\n                updatedKeys1[9] = '';\n                updatedKeys0[(returnIndex + 9) % 10] = returnNumberString;\n            }\n            setKeys1(updatedKeys1);\n            setKeys0(updatedKeys0);\n        if (numbersEntered % 2 === 0 && numbersEntered > 0) {\n            const emptyIndex1 = updatedKeys1.findIndex((val) => val === '');\n            const emptyIndex2 = updatedKeys2.findIndex((val) => val === '');\n            let lastFactorTotal = 0;\n            if (emptyIndex2 !== -1) {\n                lastFactorTotal = updatedKeys2[emptyIndex2 - 1];\n            } else if (emptyIndex2 === -1) {\n                lastFactorTotal = updatedKeys2[8];\n            }\n            updatedFactorTotal -= lastFactorTotal;\n            if (emptyIndex1 > 0 && emptyIndex1 < 10) {\n                updatedKeys2[emptyIndex1 - 1] = '';\n                updatedKeys2[emptyIndex1 - 2] = '';\n            } else if (emptyIndex1 === -1) {\n                updatedKeys2[8] = '';\n                updatedKeys2[7] = '';\n            }\n            setKeys2(updatedKeys2)\n            setTotalFactors(updatedFactorTotal)\n            const removeLastItem = () => {\n                setFactorsFive(prevItems => prevItems.slice(0, -1));\n              };\n            removeLastItem()\n        }\n    }\n    const findFactors = (number) => {\n        const factors = [];\n        for (let i = 1; i <= Math.sqrt(number); i++) {\n        if (number % i === 0) {\n            factors.push(i);\n    \n            if (number / i !== i) {\n            factors.push(number / i);\n            }\n        }\n        }\n        factors.sort((a, b) => a - b); // Sort factors in ascending order\n        return factors;\n    }\n\n    const gameOver = () => {\n        setSymbolResponse(\"check\");\n        setTimeout(() => {\n            // localStorage.setItem('factorsList', JSON.stringify(newFactorsList));\n            setSymbolResponse(\"\");\n            let newKeysColor = [...keysColor];\n            newKeysColor[0][1] = 1;\n            setKeysColor(newKeysColor);\n            setGameChosen({ gameChosen: false, gameNumber: '' });\n        }, 1000); \n    }\n\n    const registerAndReset = () => {\n        if (keys1.includes(\"\")) return;\n        let newFactorTotal = totalFactors;\n        let newFactorsList = [...factorsList];\n        if (!factorsList.includes(newFactorTotal)) {\n            newFactorsList.push(newFactorTotal)\n            newFactorsList.sort((a, b) => a - b); // Sort factors in ascending order\n            setFactorsList(newFactorsList)\n        }\n        setTimeout(() => {\n            setFactorsFive([])\n            setTotalFactors(0)\n            setKeys0([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"])\n            setKeys1([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n            setKeys2([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n            if (newFactorsList.includes(10) && newFactorsList.includes(49)) {\n                gameOver();\n            }\n        }, 1000);        \n    }\n\n    const getNumberColorStyle = (number) => {\n        const colorValue = Math.floor((number - 10) * 5);\n        const colorHex = colorValue.toString(16).padStart(2, '0');\n        let color = `#${colorHex.repeat(3)}`;\n        if (number === 10 || number === 49) {\n            color = \"#7dd7ff\"\n        }\n        return { color };\n    };\n\n    useEffect(() => {\n        registerAndReset()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [keys1]);\n\n    const handleKeyboard = useCallback((event) => {\n        if(event.key === \"Backspace\") {\n            removeNumber()\n        } else if (event.key === \" \") {\n            localStorage.setItem('factorsList', JSON.stringify(factorsList));\n            setGameChosen({gameChosen: false, gameNumber: ''});\n        } else {\n            keys0.forEach((key) => {\n                if (event.key === key) {\n                    addNumber(key)\n            }}, [keys0, keys1]);\n            fauxKeys1.forEach((key) => {\n                if (event.key.toUpperCase() === key.toUpperCase()) {\n                    removeNumber()\n            }}, [keys0, keys1]);\n        }\n    });\n\n    useKeydownEffect(handleKeyboard, [handleKeyboard]);\n\n    // useEffect(() => {\n    //     // Retrieve factorsList from localStorage if it exists\n    //     const storedFactorsList = localStorage.getItem('factorsList');\n    //     if (storedFactorsList) {\n    //         try {\n    //           setFactorsList(JSON.parse(storedFactorsList));\n    //         } catch (error) {\n    //           console.error('Error parsing factorsList:', error);\n    //           // Handle the error, such as setting a default value for factorsList\n    //         }\n    //     }\n    // }, []);\n\n    const chunkArray = (arr, chunkSize) => {\n        const chunks = [];\n        for (let i = 0; i < arr.length; i += chunkSize) {\n          chunks.push(arr.slice(i, i + chunkSize));\n        }\n        return chunks;\n    };\n    \n    const rows = chunkArray(keys1.slice(0,10), 2);\n\n    return (\n        <div className=\"keyboard\" onKeyDown={handleKeyboard}>\n            <Keyboard2Context.Provider\n                value={{\n                addNumber,\n                removeNumber,\n                factorsList}}>\n            <div className='line0'>{keys0.map((key, index) => {\n                const uniqueKey = `0-${index}`;\n                return <Key keyVal={key} key={uniqueKey} keyLine = {0} clickableKey={true} add={true} />;\n            })}</div>\n            <div className='hundreds_box'>\n                {rows.map((row, rowIndex) => (\n                    <div className={`factors_line${rowIndex + 1}`} key={`factors_line${rowIndex + 1}`}>\n                    {row.map((key, colIndex) => {\n                        const uniqueKey = `1-${rowIndex}-${colIndex}`;\n                        return <Key keyVal={key} key={uniqueKey} black keyLine = {1} clickableKey={true} add={false} />;\n                    })}\n                    </div>\n                ))}\n            </div>\n            <div className='line3'>< Spacebar keyVal= {symbolResponse || \"Factors: \" + totalFactors} /></div>\n            <div> {factorsFive.length > 0 ? (\n                factorsFive.map((array, index) => (\n                <h3 key={index} style={{ marginTop: '2px', marginBottom: '2px' }} >{array.join(', ')}</h3>\n                    ))\n                ) : (\n                <h3>\n                    {shouldIncludeEllipsisBefore && factorsList.length > 0 && <span style={arrowStyles}>{<BiSolidLeftArrowAlt />} </span>}\n                    {factorsList.map((number, index) => (\n                    <span key={index} style={getNumberColorStyle(number)}> \n                        {number + ' '}\n                    </span>\n                    ))}\n                    {shouldIncludeEllipsisAfter && factorsList.length > 0 && <span style={arrowStyles}>{<BiSolidRightArrowAlt />}</span>}\n                </h3>\n                )}\n            </div>\n            </Keyboard2Context.Provider>\n        </div>\n    )\n\n}\n\nexport default Keyboard2","import React, { useContext } from 'react'\nimport { AppContext } from '../../App';\nimport { FaCheck, FaTimes } from '../IconModule';\n\nfunction Spacebar({ keyVal }) {\n  const { setGameChosen} = useContext(AppContext);\n  const selectLetter = () => {\n    // localStorage.setItem('factorsList', JSON.stringify(factorsList));\n    setGameChosen({gameChosen: false, gameNumber: ''});  \n  };\n\n  let iconComponent = null;\n  let iconColorClass = '';\n\n  if (keyVal === 'check') {\n    iconComponent = <FaCheck />;\n    iconColorClass = 'check-color';\n  } else {\n    iconComponent = keyVal;\n  }\n\n  return (\n      <div className={`key spacebar ${iconColorClass}`} onClick={selectLetter}>\n        {iconComponent}\n      </div>\n    )\n}\n\nexport default Spacebar"],"names":["_ref","keyVal","blank","black","clickableKey","add","keyLine","_useContext","useContext","Keyboard2Context","addNumber","removeNumber","iconComponent","_jsx","GoDotFill","className","onClick","children","createContext","AppContext","setGameChosen","keysColor","setKeysColor","_useState","useState","_useState2","_slicedToArray","keys0","setKeys0","_useState3","_useState4","keys1","setKeys1","_useState5","_useState6","keys2","setKeys2","_useState7","_useState8","totalFactors","setTotalFactors","_useState9","_useState10","factorsList","setFactorsList","_useState11","_useState12","factorsFive","setFactorsFive","shouldIncludeEllipsisBefore","includes","shouldIncludeEllipsisAfter","fauxKeys1","_useState13","_useState14","symbolResponse","setSymbolResponse","arrowStyles","color","fontSize","position","top","key","updatedKeys0","_toConsumableArray","updatedKeys1","updatedKeys2","updatedFactorTotal","numbersEnteredBefore","filter","val","length","emptyIndex1","findIndex","emptyIndex0","emptyIndex2","joinedStrings","slice","join","resultingInteger","parseInt","newFactorArray","findFactors","newFactorTotal","prevFactorsFive","concat","numbersEntered","returnIndex","returnNumberString","lastFactorTotal","prevItems","number","factors","i","Math","sqrt","push","sort","a","b","registerAndReset","newFactorsList","setTimeout","newKeysColor","gameChosen","gameNumber","getNumberColorStyle","colorHex","floor","toString","padStart","repeat","useEffect","handleKeyboard","useCallback","event","localStorage","setItem","JSON","stringify","forEach","toUpperCase","useKeydownEffect","rows","arr","chunkSize","chunks","chunkArray","onKeyDown","_jsxs","Provider","value","map","index","uniqueKey","Key","row","rowIndex","colIndex","Spacebar","array","style","marginTop","marginBottom","BiSolidLeftArrowAlt","BiSolidRightArrowAlt","iconColorClass","FaCheck"],"sourceRoot":""}
{"version":3,"file":"static/js/4209.f67f68e8.chunk.js","mappings":"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","sources":["components/GameE/KeyE.js","components/GameE/KeyboardE.js","components/GameE/SpacebarE.js"],"sourcesContent":["import React, { useContext } from 'react'\nimport { KeyboardEContext } from './KeyboardE';\nimport { GoDotFill } from '../IconModule';\n\nfunction Key({ keyVal, guessKey, keyLine, clickableKey, symbol }) {\n  const { addNumber } = useContext(KeyboardEContext);\n  const selectLetter = () => {\n    if (clickableKey) {\n      addNumber(keyVal); \n    }\n  };\n\n  let iconComponent = null;\n\n  if ((keyLine === 1 || keyLine === 2) && keyVal === \"\") {\n    iconComponent = <GoDotFill />;\n  } else {\n    iconComponent = keyVal;\n  }\n\n  return (\n      <div className={symbol ? 'key mathsymbol_key' : guessKey ? 'key guess_key' : 'key'} onClick={selectLetter}>\n        {iconComponent}\n      </div>\n    )\n}\n\nexport default Key","import React, { useCallback, useContext, useEffect, useState, createContext, useRef } from 'react';\nimport { AppContext } from '../../App';\nimport { useKeydownEffect } from '../../utils';\nimport Key from './KeyE';\nimport Spacebar from './SpacebarE';\n\nexport const KeyboardEContext = createContext();\n\nfunction KeyboardE() {\n    const { setGameChosen, keysColor, setKeysColor } = useContext(AppContext);\n    const [keys0, setKeys0] = useState([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]);\n    const [keys1, setKeys1] = useState([\"\", \"\", \"x\", \"\", \"=\", \"\", \"\"]);\n    const [keys2, setKeys2] = useState([\"\", \"x\", \"\", \"=\", \"\", \"\"]);\n\n    const [symbolResponse, setSymbolResponse] = useState(\"\");\n\n    const disableKeyPressRef = useRef(false);\n\n    const gameOver = () => {\n        setSymbolResponse(\"check\");\n        setTimeout(() => {\n            let newKeysColor = [...keysColor];\n            newKeysColor[1][2] = 1;\n            setKeysColor(newKeysColor);\n            setGameChosen({ gameChosen: false, gameNumber: '' });\n        }, 1000);\n    }\n\n    const resetBadProduct = () => {\n        disableKeyPressRef.current = true;\n        setSymbolResponse(\"times\");\n        setTimeout(() => {\n            setKeys0([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]);\n            setKeys1([\"\", \"\", \"x\", \"\", \"=\", \"\", \"\"]);\n            setKeys2([\"\", \"x\", \"\", \"=\", \"\", \"\"]);\n            setSymbolResponse(\"\");\n            disableKeyPressRef.current = false;\n        }, 500);\n    }\n\n    const findProduct = () => {\n        let newKeys0 = [...keys0];\n        let newKeys1 = [...keys1];\n        let newKeys2 = [...keys2];\n        if (keys1[0] !== \"\" && keys1[1] !== \"\" && keys1[3] !== \"\" && keys1.includes(\"\")) {\n            const keys1Int1 = parseInt(keys1.slice(0,2).join(\"\"));\n            const keys1Int2 = parseInt(keys1[3]);\n            const product = keys1Int1*keys1Int2;\n            if (product < 100) {\n                const digitsArray = product.toString().split('');\n                const bothDigitsExistInKeys0 = digitsArray.every((digit) => keys0.includes(digit));\n                if (bothDigitsExistInKeys0) {\n                    newKeys1[5] = digitsArray[0];\n                    newKeys1[6] = digitsArray[1];\n                    setKeys1(newKeys1);\n                    digitsArray.forEach((val) => {\n                        let returnIndex = keys0.indexOf(val);\n                        newKeys0[returnIndex] = \"\";\n                    })\n                    setKeys0(newKeys0);\n                } else {\n                    let newDigitsArray = [...digitsArray];\n                    digitsArray.forEach((val) => {\n                        if (!keys0.includes(val)) {\n                            let returnIndex = digitsArray.indexOf(val);\n                            newDigitsArray[returnIndex] = \"\";\n                        };\n                    })\n                    newKeys1[5] = digitsArray[0];\n                    newKeys1[6] = digitsArray[1];\n                    setKeys1(newKeys1);\n                    resetBadProduct();\n                }\n            } else {\n                resetBadProduct();\n            }\n        } else if (!keys1.includes(\"\") && keys2[0] !== \"\" && keys2[2] !== \"\" && keys2.includes(\"\")) {\n            const keys2Int1 = parseInt(keys2[0]);\n            const keys2Int2 = parseInt(keys2[2]);\n            const product = keys2Int1*keys2Int2;\n            if (product > 9 && product < 100) {\n                const digitsArray = product.toString().split('');\n                const bothDigitsExistInKeys0 = digitsArray.every((digit) => keys0.includes(digit)) && new Set(digitsArray).size === digitsArray.length;\n                if (bothDigitsExistInKeys0) {\n                    newKeys2[4] = digitsArray[0];\n                    newKeys2[5] = digitsArray[1];\n                    setKeys2(newKeys2);\n                    digitsArray.forEach((val) => {\n                        let returnIndex = keys0.indexOf(val);\n                        newKeys0[returnIndex] = \"\";\n                    })\n                    setKeys0(newKeys0);\n                    gameOver();\n                } else {\n                    let newDigitsArray = [...digitsArray];\n                    digitsArray.forEach((val) => {\n                        if (!keys0.includes(val)) {\n                            let returnIndex = digitsArray.indexOf(val);\n                            newDigitsArray[returnIndex] = \"\";\n                        };\n                    })\n                    newKeys2[4] = digitsArray[0];\n                    newKeys2[5] = digitsArray[1];\n                    setKeys2(newKeys2);\n                    resetBadProduct();\n                }\n            } else {\n                resetBadProduct();\n            }\n        } else {\n\n        }\n    };\n\n    useEffect(() => {\n        findProduct()\n    }, [keys1, keys2]);\n\n    const addNumber = (key) => {\n        let newKeys0 = [...keys0]\n        let newKeys1 = [...keys1]\n        let newKeys2 = [...keys2]\n        let newPlayableArray = [keys1[0], keys1[1], keys1[3], keys2[0], keys2[2]];\n        if (keys0.includes(key)) {\n            const emptyIndex = newPlayableArray.findIndex((val) => val === \"\");\n            const keyIndex = newKeys0.findIndex((val) => val === key);\n            if (emptyIndex < 2) {\n                newKeys1[emptyIndex] = key;\n                setKeys1(newKeys1)\n            } else if (emptyIndex === 2) {\n                newKeys1[3] = key;\n                setKeys1(newKeys1)\n            } else if (emptyIndex > 2) {\n                if (newKeys2[0] === \"\") {\n                    newKeys2[0] = key;\n                } else if (newKeys2[2] === \"\") {\n                    newKeys2[2] = key;\n                }\n                setKeys2(newKeys2)\n            } else {\n                return\n            }\n            newKeys0[keyIndex] = \"\";\n            setKeys0(newKeys0)\n        }\n        \n    }\n\n    const handleKeyboard = useCallback((event) => {\n        if (disableKeyPressRef.current) {\n            event.preventDefault();\n            return;\n        } else if (event.key === \" \") {\n            setGameChosen({gameChosen: false, gameNumber: ''});\n        } else {\n            keys0.forEach((key) => {\n                if (event.key === key) {\n                    addNumber(key)\n            }});\n        }\n    });\n\n    useKeydownEffect(handleKeyboard, [handleKeyboard]);\n\n    return (\n        <div className=\"keyboard\" onKeyDown={handleKeyboard}>\n            <KeyboardEContext.Provider\n                value={{\n                addNumber}}>\n            <div className='line0'>{keys0.map((key, index) => {\n                const uniqueKey = `0-${index}`;\n                return <Key keyVal={key} key={uniqueKey} clickableKey={true} keyLine={0} />;\n            })}</div>\n            <div className='line1'>\n                {keys1.map((key, index) => {\n                const uniqueKey = `1-${index}`;\n                const isSymbol = index === 2 || index === 4;\n                return <Key keyVal={key} key={uniqueKey} clickableKey={false} symbol={isSymbol ? true : undefined} keyLine={1} guessKey={!isSymbol} />;\n            })}</div>\n            <div className='line2'>\n                {keys2.map((key, index) => {\n                const uniqueKey = `2-${index}`;\n                const isSymbol = index === 1 || index === 3;\n                return <Key keyVal={key} key={uniqueKey} clickableKey={false} symbol={isSymbol ? true : undefined} keyLine={2} guessKey={!isSymbol}  />;})}\n            </div>\n            <div className='line3'>< Spacebar keyVal={symbolResponse} /></div>\n            </KeyboardEContext.Provider>\n        </div>\n    )\n\n}\n\nexport default KeyboardE","import React, { useContext } from 'react'\nimport { AppContext } from '../../App';\nimport { FaCheck, FaTimes } from '../IconModule';\n\nfunction Spacebar({ keyVal }) {\n  const { setGameChosen} = useContext(AppContext);\n  const selectLetter = () => {\n    setGameChosen({gameChosen: false, gameNumber: ''});\n    };\n\n    let iconComponent = null;\n    let iconColorClass = '';\n\n    if (keyVal === 'check') {\n      iconComponent = <FaCheck />;\n      iconColorClass = 'check-color';\n    } else if (keyVal === 'times') {\n      iconComponent = <FaTimes />;\n      iconColorClass = 'times-color';\n  }\n\n  return (\n      <div className={`key spacebar ${iconColorClass}`}  onClick={selectLetter}>\n        {iconComponent}\n      </div>\n    )\n}\n\nexport default Spacebar"],"names":["_ref","keyVal","guessKey","keyLine","clickableKey","symbol","addNumber","useContext","KeyboardEContext","iconComponent","_jsx","GoDotFill","className","onClick","children","createContext","_useContext","AppContext","setGameChosen","keysColor","setKeysColor","_useState","useState","_useState2","_slicedToArray","keys0","setKeys0","_useState3","_useState4","keys1","setKeys1","_useState5","_useState6","keys2","setKeys2","_useState7","_useState8","symbolResponse","setSymbolResponse","disableKeyPressRef","useRef","resetBadProduct","current","setTimeout","findProduct","newKeys0","_toConsumableArray","newKeys1","newKeys2","includes","product","parseInt","slice","join","digitsArray","toString","split","every","digit","forEach","val","returnIndex","indexOf","newDigitsArray","Set","size","length","newKeysColor","gameChosen","gameNumber","useEffect","key","newPlayableArray","emptyIndex","findIndex","keyIndex","handleKeyboard","useCallback","event","preventDefault","useKeydownEffect","onKeyDown","_jsxs","Provider","value","map","index","uniqueKey","concat","Key","isSymbol","undefined","Spacebar","iconColorClass","FaCheck","FaTimes"],"sourceRoot":""}
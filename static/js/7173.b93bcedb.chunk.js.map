{"version":3,"file":"static/js/7173.b93bcedb.chunk.js","mappings":"8IAuBA,UArBA,SAAkBA,GAAuB,IAEnCC,EAFgBC,EAAMF,EAANE,OAAQC,EAAKH,EAALG,MAc5B,OATEF,EADY,IAAVE,EACS,UACQ,IAAVA,EACE,UACQ,IAAVA,EACE,UAEA,SAIXC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAeC,MAAO,CAAEC,gBAAiBN,GAAWO,SAC9DN,GAGT,C,yECuBA,UAxCA,WACE,IAAAO,GAA8CC,EAAAA,EAAAA,YAAWC,EAAAA,kBAAjDC,EAAOH,EAAPG,QAASC,EAAWJ,EAAXI,YAGjB,OAHyCJ,EAAXK,aAI5BC,EAAAA,EAAAA,MAAA,OAAKV,UAAU,aAAYG,SAAA,EACzBJ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYG,SACxBI,EAAQ,GAAGI,KAAI,SAACC,EAAKC,GACtB,IAAMC,EAAS,cAAAC,OAAiBF,GAChC,OACEH,EAAAA,EAAAA,MAACM,EAAAA,SAAc,CAAAb,SAAA,EACbJ,EAAAA,EAAAA,KAACkB,EAAAA,QAAS,CAACpB,OAAQe,EAAKd,MAAOU,EAAY,GAAGK,KACnC,IAAVA,IAAed,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uBAAsBG,SAAC,QAFnCW,EAKzB,OACAf,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYG,SACxBI,EAAQ,GAAGI,KAAI,SAACC,EAAKC,GACtB,IAAMC,EAAS,cAAAC,OAAiBF,GAChC,OACEH,EAAAA,EAAAA,MAACM,EAAAA,SAAc,CAAAb,SAAA,EACbJ,EAAAA,EAAAA,KAACkB,EAAAA,QAAS,CAACpB,OAAQe,EAAKd,MAAOU,EAAY,GAAGK,KACnC,IAAVA,IAAed,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uBAAsBG,SAAC,QAFnCW,EAKzB,OACAf,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYG,SACxBI,EAAQ,GAAGI,KAAI,SAACC,EAAKC,GACtB,IAAMC,EAAS,cAAAC,OAAiBF,GAChC,OACEH,EAAAA,EAAAA,MAACM,EAAAA,SAAc,CAAAb,SAAA,EACbJ,EAAAA,EAAAA,KAACkB,EAAAA,QAAS,CAACpB,OAAQe,EAAKd,MAAOU,EAAY,GAAGK,KACnC,IAAVA,IAAed,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uBAAsBG,SAAC,QAFnCW,EAKzB,QAGN,C,8DCRA,UA/BA,SAAYnB,GAAoC,IAY1CC,EAZSC,EAAMF,EAANE,OAAQqB,EAAIvB,EAAJuB,KAAMpB,EAAKH,EAALG,MAAOqB,EAAOxB,EAAPwB,QAClCf,GAAwDC,EAAAA,EAAAA,YAAWC,EAAAA,kBAA3Dc,EAAShB,EAATgB,UAAWC,EAAYjB,EAAZiB,aAAcC,EAAkBlB,EAAlBkB,mBAuBjC,OATE1B,EADY,IAAVE,EACS,UACQ,IAAVA,EACE,UACQ,IAAVA,EACE,UAEA,SAITC,EAAAA,EAAAA,KAAA,OAAKC,UAAWkB,EAAO,2BAA6B,MAAOjB,MAAO,CAAEC,gBAAiBN,GAAY2B,QAvBnF,WACZD,EAAmBE,UAEA,IAAZL,GAA6B,IAAZA,GAA6B,IAAZA,EACzCC,EAAUvB,GACS,IAAZsB,GACPE,IAEN,EAewHlB,SACjHN,GAGT,C,mOCtBaS,GAAmBmB,EAAAA,EAAAA,iBA8ZhC,UA5ZA,WACI,IAAArB,GAAmDC,EAAAA,EAAAA,YAAWqB,EAAAA,GAAtDC,EAAavB,EAAbuB,cAAeC,EAASxB,EAATwB,UAAWC,EAAYzB,EAAZyB,aAClCC,GAA0BC,EAAAA,EAAAA,UAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAIC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArEI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAChBI,EAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACtDC,EAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACjDC,EAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACvCC,EAAU,CAACH,EAAOC,EAAOC,GAE/BE,GAAkDT,EAAAA,EAAAA,UAAS,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA7FE,EAAiBD,EAAA,GAAEE,EAAoBF,EAAA,GAC9CG,GAAkDb,EAAAA,EAAAA,UAAS,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAGc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAA7FE,EAAiBD,EAAA,GAAEE,EAAoBF,EAAA,GAC9CG,GAAkDjB,EAAAA,EAAAA,UAAS,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAGkB,GAAAhB,EAAAA,EAAAA,GAAAe,EAAA,GAAzFE,EAAiBD,EAAA,GAAEE,EAAoBF,EAAA,GAC9CG,GAAkDrB,EAAAA,EAAAA,UAAS,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAGsB,GAAApB,EAAAA,EAAAA,GAAAmB,EAAA,GAAjFE,EAAiBD,EAAA,GAAEE,EAAoBF,EAAA,GAE9CG,GAAkCzB,EAAAA,EAAAA,UAAS,IAAG0B,GAAAxB,EAAAA,EAAAA,GAAAuB,EAAA,GAAvCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAAoC7B,EAAAA,EAAAA,UAAS,IAAG8B,GAAA5B,EAAAA,EAAAA,GAAA2B,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAAgCjC,EAAAA,EAAAA,UAAS,IAAGkC,GAAAhC,EAAAA,EAAAA,GAAA+B,EAAA,GAArCE,GAAQD,EAAA,GAAEE,GAAWF,EAAA,GAE5BG,IAA8BrC,EAAAA,EAAAA,UAAS,CACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAAKsC,IAAApC,EAAAA,EAAAA,GAAAmC,GAAA,GAHrC7D,GAAO8D,GAAA,GAAEC,GAAUD,GAAA,GAK1BE,IAAsCxC,EAAAA,EAAAA,UAAS,CAC7C,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACtC,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACtC,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAIyC,IAAAvC,EAAAA,EAAAA,GAAAsC,GAAA,GAHrC/D,GAAWgE,GAAA,GAAEC,GAAcD,GAAA,GAKlCE,IAAsC3C,EAAAA,EAAAA,UAAS,GAAE4C,IAAA1C,EAAAA,EAAAA,GAAAyC,GAAA,GAA1CjE,GAAWkE,GAAA,GAAEC,GAAcD,GAAA,GAE5BE,GAAY,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEhEC,IAA8C/C,EAAAA,EAAAA,UAAS,IAAIgD,KAAMC,IAAA/C,EAAAA,EAAAA,GAAA6C,GAAA,GAA1DG,GAAeD,GAAA,GAAEE,GAAkBF,GAAA,GAC1CG,IAAkDpD,EAAAA,EAAAA,UAAS,IAAIgD,KAAMK,IAAAnD,EAAAA,EAAAA,GAAAkD,GAAA,GAA9DE,GAAiBD,GAAA,GAAEE,GAAoBF,GAAA,GAC9CG,IAAgDxD,EAAAA,EAAAA,UAAS,IAAIgD,KAAMS,IAAAvD,EAAAA,EAAAA,GAAAsD,GAAA,GAA5DE,GAAgBD,GAAA,GAAEE,GAAmBF,GAAA,GAC5CG,IAAsC5D,EAAAA,EAAAA,UAAS,IAAG6D,IAAA3D,EAAAA,EAAAA,GAAA0D,GAAA,GAA3CE,GAAWD,GAAA,GAAEE,GAAcF,GAAA,GAClCG,IAAoChE,EAAAA,EAAAA,UAAS,IAAGiE,IAAA/D,EAAAA,EAAAA,GAAA8D,GAAA,GAAzCE,GAAUD,GAAA,GAAEE,GAAaF,GAAA,GAEhCG,IAA4CpE,EAAAA,EAAAA,UAAS,IAAGqE,IAAAnE,EAAAA,EAAAA,GAAAkE,GAAA,GAAjDE,GAAcD,GAAA,GAAEE,GAAiBF,GAAA,GAElC9E,IAAqBiF,EAAAA,EAAAA,SAAO,GAE5BC,GAAuB,eAAA7G,GAAA8G,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAA3B,EAAA4B,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEoE,OAD5FhC,EAAkB,IAAIF,IAAImC,EAAAA,OAC1BL,GAAqBM,EAAAA,EAAAA,GAAIlC,GAAiBmC,KAAKC,MAAMD,KAAKE,SAAWrC,EAAgBsC,OAAMR,EAAAS,OAAA,SAC1F,CAAEvC,gBAAAA,EAAiB4B,mBAAAA,IAAoB,wBAAAE,EAAAU,OAAA,GAAAb,EAAA,KAC/C,kBAJ4B,OAAAjH,EAAA+H,MAAA,KAAAC,UAAA,KAMvBC,GAAyB,eAAAC,GAAApB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAmB,IAAA,IAAAzC,EAAA,OAAAqB,EAAAA,EAAAA,KAAAI,MAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,OAC4B,OAAtD5B,EAAoB,IAAIN,IAAIiD,EAAAA,GAAyBD,EAAAP,OAAA,SACpD,CAAEnC,kBAAAA,IAAmB,wBAAA0C,EAAAN,OAAA,GAAAK,EAAA,KAC7B,kBAH8B,OAAAD,EAAAH,MAAA,KAAAC,UAAA,KAKzBM,GAAwB,eAAAC,GAAAzB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAwB,IAAA,IAAA1C,EAAA,OAAAiB,EAAAA,EAAAA,KAAAI,MAAA,SAAAsB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,OAC2B,OAApDxB,EAAmB,IAAIV,IAAIsD,EAAAA,OAAwBD,EAAAZ,OAAA,SAClD,CAAE/B,iBAAAA,IAAkB,wBAAA2C,EAAAX,OAAA,GAAAU,EAAA,KAC5B,kBAH6B,OAAAD,EAAAR,MAAA,KAAAC,UAAA,MAK9BW,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,eAAAC,GAAA/B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA8B,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAlC,EAAAA,EAAAA,KAAAI,MAAA,SAAA+B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,cAAA4B,EAAA5B,KAAA,EACYT,KAA0B,KAAD,EAAlC,OAAbkC,EAAaG,EAAAC,KAAAD,EAAA5B,KAAA,EACWW,KAA4B,KAAD,EAApC,OAAfe,EAAeE,EAAAC,KAAAD,EAAA5B,KAAA,EACQgB,KAA2B,KAAD,EAAjDW,EAAcC,EAAAC,KAEpB5D,GAAmBwD,EAAczD,iBACjCa,GAAe4C,EAAc7B,oBAC7BvB,GAAqBqD,EAAgBtD,mBACrCK,GAAoBkD,EAAenD,kBAAkB,yBAAAoD,EAAApB,OAAA,GAAAgB,EAAA,KACtD,kBATc,OAAAD,EAAAd,MAAA,KAAAC,UAAA,KAWfY,GACF,GAAG,IAEH,IAAMnH,GAAY,SAACR,GACjB,IAAImI,GAAW5B,EAAAA,EAAAA,GAAOjF,GAChB8G,EAAaD,EAAYE,WAAU,SAACC,GAAG,MAAa,KAARA,CAAU,IACxDF,GAAc,IACdD,EAAYC,GAAcpI,EAAIuI,cAC1B1I,GAAc,IAChBsI,EAAYC,EAAa,GAAKpI,EAAIuI,gBAExChH,EAAS4G,EACX,EAEM1H,GAAe,WACnB,IAAI0H,GAAW5B,EAAAA,EAAAA,GAAOjF,GAChB8G,EAAaD,EAAYE,WAAU,SAACC,GAAG,MAAa,KAARA,CAAU,IACxDF,EAAa,GAAKA,EAAa,KAC/BD,EAAYC,EAAa,GAAK,GAC1BvI,GAAc,IAChBsI,EAAYC,EAAa,GAAK,KAEpC7G,EAAS4G,EACX,EAEMK,GAAqB,SAACC,EAAWC,IACnCC,EAAAA,EAAAA,IAAmBF,EAAWC,EAAOlH,EAAOW,IAC5CwG,EAAAA,EAAAA,IAAmBF,EAAWC,EAAOjH,EAAOc,IAC5CoG,EAAAA,EAAAA,IAAmBF,EAAWC,EAAOhH,EAAOiB,EAChD,GAEA+E,EAAAA,EAAAA,YAAU,WACNc,GAAmBlF,GAAU,GAC7BkF,GAAmBtF,EAAY,GAC/BsF,GAAmB1F,EAAW,EAClC,GAAG,CAACA,EAAWI,EAAYI,KAE3B,IAAMsF,GAAmB,SAACC,GACxB,GAAIhJ,GAAc,EAEhBkC,EAAqB8G,GAErBhF,IAAe,SAACiF,GACd,IAAMC,GAAcxC,EAAAA,EAAAA,GAAOuC,GAE3B,OADAC,EAAelJ,IAAegJ,EACvBE,CACT,IAEArF,IAAW,SAACsF,GACV,IAAMC,GAAU1C,EAAAA,EAAAA,GAAOyC,GAEvB,OADAC,EAAWpJ,KAAY0G,EAAAA,EAAAA,GAAOjF,GACvB2H,CACT,IAEAC,YAAW,WACTnH,EAAqB,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC3DR,EAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAC9CyC,IAAe,SAACmF,GAAe,OAAKA,EAAkB,CAAC,IACvDzI,GAAmBE,SAAU,CAC/B,GAAG,UAEE,GAAoB,IAAhBf,GAAmB,CAC5BkC,EAAqB8G,GACKA,EAAmBO,MAAK,SAAAlK,GAAK,OAAc,IAAVA,CAAW,KAGpEwG,GAAkB,SAClBJ,GAAcL,IACdiE,YAAW,WACT,IACMG,EADoBC,MAAMC,KAAKlF,IACQmF,QAAO,SAAAC,GAAI,OAAIA,IAASxE,EAAW,IAC1EgB,EAAqBoD,EAAmB7C,KAAKC,MAAMD,KAAKE,SAAW2C,EAAmBK,SAC5FxE,GAAee,GACflE,EAAqB,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC3D2B,GAAW,CACT,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAEvCG,GAAe,CACb,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACtC,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACtC,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACtC,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAExC9B,EAAqB,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC3DI,EAAqB,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC3DI,EAAqB,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACvDI,EAAqB,EAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC/CI,EAAa,IACbI,EAAc,IACdI,GAAY,IACZhC,EAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAC9CyC,GAAe,GACf0B,GAAkB,IAClBJ,GAAc,IACd5E,GAAmBE,SAAU,CAC/B,GAAG,OAGH8E,GAAkB,SAClBwD,YAAW,WACT,IAAIS,GAAYpD,EAAAA,EAAAA,GAAOvF,GACvB2I,EAAa,GAAG,GAAK,EACrB1I,EAAa0I,GACb5I,EAAc,CAAE6I,YAAY,EAAOC,WAAY,KAC/CnE,GAAkB,IAClBhF,GAAmBE,SAAU,CAC/B,GAAG,KAEP,CACF,EAEMkJ,GAAW,SAACC,EAAYC,EAAYnB,EAAoBoB,EAAiBC,GAC7E,GAAIrK,GAAc,EAAG,CAEnB,IADA,IAAIsK,GAAW5D,EAAAA,EAAAA,GAAOjD,IACb8G,EAAI,EAAGA,EAAI,EAAGA,IACC,MAAlBL,EAAWK,KACbD,EAAYE,KAAKN,EAAWK,IAC5BvB,EAAmBuB,GAAK,GAEJ,MAAlBJ,EAAWI,KACbD,EAAYE,KAAKL,EAAWI,IAC5BvB,EAAmBuB,EAAI,GAAK,GAGhC,IAAIE,GAAc/D,EAAAA,EAAAA,GAAO,IAAIpC,IAAIgG,IAEjCG,EAAiBA,EAAed,QAAO,SAAAxJ,GAAG,OAAKiK,EAAgBM,SAASvK,KAASkK,EAAiBK,SAASvK,EAAI,IAC/GuD,GAAY+G,GACZ1B,GAAiBC,EACnB,MAAO,GAAoB,IAAhBhJ,GAAmB,CAE5B,IADA,IAAIsK,GAAW5D,EAAAA,EAAAA,GAAOjD,IACb8G,EAAI,EAAGA,EAAI,GAAIA,IACA,MAAlBL,EAAWK,KACbD,EAAYE,KAAKN,EAAWK,IAC5BvB,EAAmBuB,GAAK,GAG5B,IAAIE,GAAc/D,EAAAA,EAAAA,GAAO,IAAIpC,IAAIgG,IAEjCG,EAAiBA,EAAed,QAAO,SAAAxJ,GAAG,OAAKiK,EAAgBM,SAASvK,KAASkK,EAAiBK,SAASvK,EAAI,IAC/GuD,GAAY+G,GACZ1B,GAAiBC,EACnB,CACF,EAEM2B,GAAa,SAACT,EAAYU,EAAW5B,EAAoB6B,EAAYV,EAAYC,GACrF,GAAIpK,GAAc,EAAG,CAInB,IAHA,IAAI8K,EAAeF,EAAUG,KAAK,IAC9BC,EAAeH,EAAUE,KAAK,IAC9BE,GAAavE,EAAAA,EAAAA,GAAOrD,GACfkH,EAAI,EAAGA,EAAI,EAAGA,IACjBO,EAAaJ,SAASR,EAAWK,KAAyB,MAAlBL,EAAWK,KACrDU,EAAcT,KAAKN,EAAWK,IAC9BvB,EAAmBuB,GAAK,EACxBO,EAAeA,EAAaI,QAAQhB,EAAWK,GAAI,KACnDL,EAAWK,GAAK,KAEdS,EAAaN,SAASP,EAAWI,KAAyB,MAAlBJ,EAAWI,KACrDU,EAAcT,KAAKL,EAAWI,IAC9BvB,EAAmBuB,EAAI,GAAK,EAC5BS,EAAeA,EAAaE,QAAQf,EAAWI,GAAI,KACnDJ,EAAWI,GAAK,KAGpB,IAAIF,GAAgB3D,EAAAA,EAAAA,GAAO,IAAIpC,IAAI2G,IAEnCZ,EAAmBA,EAAiBV,QAAO,SAAAxJ,GAAG,OAAKiK,EAAgBM,SAASvK,EAAI,IAChFmD,EAAc+G,GACdJ,GAASC,EAAYC,EAAYnB,EAAoBoB,EAAiBC,EACxE,MAAO,GAAoB,IAAhBrK,GAAmB,CAG5B,IAFA,IAAImL,EAAiBP,EAAUG,KAAK,IAChCE,GAAavE,EAAAA,EAAAA,GAAOrD,GACfkH,EAAI,EAAGA,EAAI,GAAIA,IAClBY,EAAeT,SAASR,EAAWK,KAAyB,MAAlBL,EAAWK,KACvDU,EAAcT,KAAKN,EAAWK,IAC9BvB,EAAmBuB,GAAK,EACxBY,EAAiBA,EAAeD,QAAQhB,EAAWK,GAAI,KACvDL,EAAWK,GAAK,KAGpB,IAAIF,GAAgB3D,EAAAA,EAAAA,GAAO,IAAIpC,IAAI2G,IAEnCZ,EAAmBA,EAAiBV,QAAO,SAAAxJ,GAAG,OAAKiK,EAAgBM,SAASvK,EAAI,IAChFmD,EAAc+G,GACdJ,GAASC,EAAY,KAAMlB,EAAoBoB,EAAiBC,EAClE,CACF,EAEMe,GAAY,SAACC,GAEjB,GADAxK,GAAmBE,SAAU,EACzBf,GAAc,EAAG,CAOnB,IANA,IAAI4K,GAASlE,EAAAA,EAAAA,GAAOtB,GAAYkG,MAAM,EAAE,IACpCT,GAASnE,EAAAA,EAAAA,GAAOtB,GAAYkG,MAAM,EAAE,KACpCpB,GAAUxD,EAAAA,EAAAA,GAAO2E,GACjBlB,GAAUzD,EAAAA,EAAAA,GAAO2E,GACjBrC,GAAkBtC,EAAAA,EAAAA,GAAOzE,GACzBsJ,GAAY7E,EAAAA,EAAAA,GAAOzD,GACdsH,EAAI,EAAGA,EAAI,EAAGA,IACjBc,EAAUd,KAAOK,EAAUL,KAC7BgB,EAAaf,KAAKN,EAAWK,IAC7BL,EAAWK,GAAK,IAChBK,EAAUL,GAAK,IACfvB,EAAmBuB,GAAK,GAEtBJ,EAAWI,KAAOM,EAAUN,KAC9BgB,EAAaf,KAAKL,EAAWI,IAC7BJ,EAAWI,GAAK,IAChBM,EAAUN,GAAK,IACfvB,EAAmBuB,EAAI,GAAK,GAGhC,IAAIH,GAAe1D,EAAAA,EAAAA,GAAO,IAAIpC,IAAIiH,IAClCrI,EAAakH,GACbO,GAAWT,EAAYU,EAAW5B,EAAoB6B,EAAYV,EAAYC,EAChF,MAAO,GAAoB,IAAhBpK,GAAmB,CAK5B,IAJA,IAAImL,GAAczE,EAAAA,EAAAA,GAAOtB,IACrB8E,GAAUxD,EAAAA,EAAAA,GAAO2E,GACjBrC,GAAkBtC,EAAAA,EAAAA,GAAOzE,GACzBsJ,GAAY7E,EAAAA,EAAAA,GAAOzD,GACdsH,EAAI,EAAGA,EAAI,GAAIA,IAClBL,EAAWK,KAAOY,EAAeZ,KACnCgB,EAAaf,KAAKN,EAAWK,IAC7BL,EAAWK,GAAK,IAChBY,EAAeZ,GAAK,IACpBvB,EAAmBuB,GAAK,GAE5B,IAAIH,GAAe1D,EAAAA,EAAAA,GAAO,IAAIpC,IAAIiH,IAClCrI,EAAakH,GACbO,GAAWT,EAAYiB,EAAgBnC,EAAoB,KAAM,KAAMoB,EACzE,CACF,GAgCAvC,EAAAA,EAAAA,YAAU,YA9BQ,WAChB,IAAIpG,EAAMiJ,SAAS,IACnB,GAAI1K,GAAc,EAAG,CACnB,IAAMqL,EAAY5J,EAAM6J,MAAM,EAAG,GAAGP,KAAK,IACrCnG,GAAkB4G,IAAIH,EAAUI,eAClCL,GAAUC,EAAUI,gBAEpB5K,GAAmBE,SAAU,EAC7B8E,GAAkB,SAClBwD,YAAW,WACT3H,EAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAC9CmE,GAAkB,IAClBhF,GAAmBE,SAAU,CACjC,GAAG,KAEL,MAAO,GAAoB,IAAhBf,GAAmB,CAC5B,IAAMqL,EAAY5J,EAAMsJ,KAAK,IACzB/F,GAAiBwG,IAAIH,EAAUI,eACjCL,GAAUC,EAAUI,gBAEpB5K,GAAmBE,SAAU,EAC7B8E,GAAkB,SAClBwD,YAAW,WACT3H,EAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAC9CmE,GAAkB,IAClBhF,GAAmBE,SAAU,CACjC,GAAG,KACJ,CACH,CAGE2K,EAEF,GAAG,CAACjK,IAEJ,IAAMkK,IAAiBC,EAAAA,EAAAA,cAAY,SAACC,GAClC,GAAIhL,GAAmBE,QACrB8K,EAAMC,sBAED,GAAkB,cAAdD,EAAM1L,IACbS,UACG,GAAkB,MAAdiL,EAAM1L,IACbe,EAAc,CAAC6I,YAAY,EAAOC,WAAY,SAC3C,CACH5F,GAAU2H,SAAQ,SAAC5L,GACX0L,EAAM1L,IAAIuI,gBAAkBvI,EAAIuI,eAChC9H,IAER,IACA,QAAAoL,EAAA,EAAAC,EAAmBnK,EAAOkK,EAAAC,EAAApC,OAAAmC,IAAE,CAAvB,IACmBE,EADbC,EAAIF,EAAAD,GAAAI,GAAAC,EAAAA,EAAAA,GACKF,GAAI,IAAtB,IAAAC,EAAAE,MAAAJ,EAAAE,EAAAG,KAAAC,MAAwB,CAAC,IAAdrM,EAAG+L,EAAArD,MACZ,GAAIgD,EAAM1L,IAAIsL,gBAAkBtL,EAAIsL,cAAe,CACjD9K,GAAUR,GACV,KACF,CACF,CAAC,OAAAsM,GAAAL,EAAAM,EAAAD,EAAA,SAAAL,EAAAO,GAAA,CACH,CACF,CACJ,GAAG,CAACvI,GAAWtC,IAIf,OAFA8K,EAAAA,EAAAA,IAAiBjB,GAAgB,CAACA,MAG9BrM,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAWsN,UAAWlB,GAAejM,UAChDO,EAAAA,EAAAA,MAACJ,EAAiBiN,SAAQ,CACtBjE,MAAO,CACPlI,UAAAA,GACAC,aAAAA,GACAd,QAAAA,GACAC,YAAAA,GACAC,YAAAA,GACAa,mBAAAA,IAAoBnB,SAAA,EACxBJ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOG,SAAE+B,EAAMvB,KAAI,SAACC,EAAKC,GACpC,IAAMC,EAAS,KAAAC,OAAQF,GACvB,OACEH,EAAAA,EAAAA,MAACM,EAAAA,SAAc,CAAAb,SAAA,EACfJ,EAAAA,EAAAA,KAACyN,EAAAA,QAAG,CAAC3N,OAAQe,EAAKM,MAAI,EAACpB,MAAO4C,EAAkB7B,GAAQM,QAAS,IACtD,IAAVN,GAAeJ,GAAc,IAAKV,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAASG,SAAC,QAFvCW,EAK3B,OACAf,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOG,SACjBiC,EAAMzB,KAAI,SAACC,EAAKC,GACjB,IAAMC,EAAS,KAAAC,OAAQF,GACvB,OAAOd,EAAAA,EAAAA,KAACyN,EAAAA,QAAG,CAAC3N,OAAQe,EAAKd,MAAOgD,EAAkBjC,GAChCM,QAAS,GAApBL,EACX,OACAf,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOG,SACnBkC,EAAM1B,KAAI,SAACC,EAAKC,GACjB,IAAMC,EAAS,KAAAC,OAAQF,GACvB,OAAOd,EAAAA,EAAAA,KAACyN,EAAAA,QAAG,CAAC3N,OAAQe,EAAKd,MAAOoD,EAAkBrC,GAClCM,QAAS,GAApBL,EACL,OAEFf,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOG,SAAEmC,EAAM3B,KAAI,SAACC,EAAKC,GACtC,IAAMC,EAAS,KAAAC,OAAQF,GACrB,OAAOd,EAAAA,EAAAA,KAACyN,EAAAA,QAAG,CAAC3N,OAAQe,EAAKd,MAAOwD,EAAkBzC,GAChCM,QAAS,GAApBL,EACP,OAEJf,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOG,UAACJ,EAAAA,EAAAA,KAAE0N,EAAAA,QAAQ,CAAC5N,OAAQwG,OACzCJ,IAAclG,EAAAA,EAAAA,KAAA,MAAAI,SAAK8F,GAAWkD,iBAAwBpJ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOG,UAACJ,EAAAA,EAAAA,KAAC2N,EAAAA,QAAa,UAKxG,C,wECzYA,UAzBA,SAAiB/N,GAAc,IAAXE,EAAMF,EAANE,OACV8B,GAAkBtB,EAAAA,EAAAA,YAAWqB,EAAAA,GAA7BC,cAKJgM,EAAgB,KAChBC,EAAiB,GAWrB,MATe,UAAX/N,GACF8N,GAAgB5N,EAAAA,EAAAA,KAAC8N,EAAAA,IAAO,IACxBD,EAAiB,eACG,UAAX/N,IACT8N,GAAgB5N,EAAAA,EAAAA,KAAC+N,EAAAA,IAAO,IACxBF,EAAiB,gBAKf7N,EAAAA,EAAAA,KAAA,OAAKC,UAAS,gBAAAe,OAAkB6M,GAAkBrM,QAjBjC,WACnBI,EAAc,CAAC6I,YAAY,EAAOC,WAAY,IAC9C,EAe0EtK,SACrEwN,GAGT,C","sources":["components/Game7/DordleBox7.js","components/Game7/DordleGuesses7.js","components/Game7/Key7.js","components/Game7/Keyboard7.js","components/Game7/Spacebar7.js"],"sourcesContent":["import React from 'react'\n\nfunction DordleBox( { keyVal, color } ) {\n\n  let boxColor;\n\n  if (color === 0) {\n    boxColor = '#cccccc'; // grey\n  } else if (color === 1) {\n    boxColor = '#d9d91e'; // yellow\n  } else if (color === 2) {\n    boxColor = '#67ae4d'; // green\n  } else {\n    boxColor = 'white';\n  }\n\n  return (\n    <div className='key mini_key' style={{ backgroundColor: boxColor }}>\n        {keyVal}\n    </div>\n  )\n}\n\nexport default DordleBox","import React, { useContext } from 'react'\nimport DordleBox from './DordleBox7';\nimport { Keyboard7Context } from './Keyboard7';\n\nfunction DordleGuesses() {\n  const { guesses, guessColors, turnCounter } = useContext(Keyboard7Context);\n  \n\n  return (\n    <div className='dordle_box'>\n      <div className='mini_line1'>\n        {guesses[0].map((key, index) => {\n        const uniqueKey = `mini_line1-${index}`;\n        return (\n          <React.Fragment key={uniqueKey}>\n            <DordleBox keyVal={key} color={guessColors[0][index]} />\n            {index === 4 && <div className='divider mini_divider'>|</div>}\n          </React.Fragment>\n        );\n      })}</div>\n      <div className='mini_line2'>\n        {guesses[1].map((key, index) => {\n        const uniqueKey = `mini_line2-${index}`;\n        return (\n          <React.Fragment key={uniqueKey}>\n            <DordleBox keyVal={key} color={guessColors[1][index]} />\n            {index === 4 && <div className='divider mini_divider'>|</div>}\n          </React.Fragment>\n        );\n      })}</div>\n      <div className='mini_line3'>\n        {guesses[2].map((key, index) => {\n        const uniqueKey = `mini_line3-${index}`;\n        return (\n          <React.Fragment key={uniqueKey}>\n            <DordleBox keyVal={key} color={guessColors[2][index]} />\n            {index === 4 && <div className='divider mini_divider'>|</div>}\n          </React.Fragment>\n        );\n      })}</div>\n    </div>\n  )\n}\n\nexport default DordleGuesses","import React, { useContext } from 'react'\nimport { Keyboard7Context } from './Keyboard7';\n\nfunction Key({ keyVal, dark, color, keyLine }) {\n  const { addLetter, removeLetter, disableKeyPressRef } = useContext(Keyboard7Context);\n  const chooseKey = () => {\n    if (disableKeyPressRef.current) {\n      return;\n    } else if (keyLine === 1 || keyLine === 2 || keyLine === 3) {\n        addLetter(keyVal);\n    } else if (keyLine === 0) {\n        removeLetter()\n    };\n  };\n\n  let boxColor;\n\n  if (color === 0) {\n    boxColor = '#cccccc'; // grey\n  } else if (color === 1) {\n    boxColor = '#d9d91e'; // yellow\n  } else if (color === 2) {\n    boxColor = '#67ae4d'; // green\n  } else {\n    boxColor = 'white';\n  }\n\n  return (\n      <div className={dark ? 'key dark_key reveal-tile' : 'key'} style={{ backgroundColor: boxColor }} onClick={chooseKey}>\n        {keyVal}\n      </div>\n    )\n}\n\nexport default Key","import React, { useCallback, useContext, useEffect, useState, createContext, useRef } from 'react';\nimport { AppContext } from '../../App';\nimport { useKeydownEffect, updateDordleColors } from '../../utils';\nimport Key from './Key7';\nimport Spacebar from './Spacebar7';\nimport compoundWordBank from './CompoundWordList.json';\nimport fiveLetterWordBank from '../FiveLetterWords.json';\nimport tenLetterWordBank from './TenLetterWords.json';\nimport DordleGuesses from './DordleGuesses7';\n\nexport const Keyboard7Context = createContext();\n\nfunction Keyboard7() {\n    const { setGameChosen, keysColor, setKeysColor } = useContext(AppContext);\n    const [keys0, setKeys0] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n    const keys1 = [\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"];\n    const keys2 = [\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\"];\n    const keys3 = [\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\"];\n    const allKeys = [keys1, keys2, keys3];\n\n    const [keys0DordleColors, setKeys0DordleColors] = useState([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]);\n    const [keys1DordleColors, setKeys1DordleColors] = useState([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]);\n    const [keys2DordleColors, setKeys2DordleColors] = useState([-1, -1, -1, -1, -1, -1, -1, -1, -1]);\n    const [keys3DordleColors, setKeys3DordleColors] = useState([-1, -1, -1, -1, -1, -1, -1]);\n\n    const [greenKeys, setGreenKeys] = useState([])\n    const [yellowKeys, setYellowKeys] = useState([])\n    const [greyKeys, setGreyKeys] = useState([])\n\n    const [guesses, setGuesses] = useState([\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]]);\n    \n    const [guessColors, setGuessColors] = useState([\n      [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1], \n      [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\n      [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]);\n\n    const [turnCounter, setTurnCounter] = useState(0);\n\n    const fauxKeys0 = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"];\n\n    const [compoundWordSet, setCompoundWordSet] = useState(new Set());\n    const [fiveLetterWordSet, setFiveLetterWordSet] = useState(new Set());\n    const [tenLetterWordSet, setTenLetterWordSet] = useState(new Set());\n    const [correctWord, setCorrectWord] = useState(\"\");\n    const [wordReveal, setWordReveal] = useState(\"\");\n\n    const [symbolResponse, setSymbolResponse] = useState(\"\");\n\n    const disableKeyPressRef = useRef(false);\n\n    const generateCompoundWordSet = async () => {\n      const compoundWordSet = new Set(compoundWordBank.words);\n      const randomCompoundWord = [...compoundWordSet][Math.floor(Math.random() * compoundWordSet.size)];\n      return { compoundWordSet, randomCompoundWord };\n    };\n    \n    const generateFiveLetterWordSet = async () => {\n      const fiveLetterWordSet = new Set(fiveLetterWordBank.words);\n      return { fiveLetterWordSet };\n    };\n    \n    const generateTenLetterWordSet = async () => {\n      const tenLetterWordSet = new Set(tenLetterWordBank.words);\n      return { tenLetterWordSet };\n    };\n    \n    useEffect(() => {\n      const fetchData = async () => {\n        const compoundWords = await generateCompoundWordSet();\n        const fiveLetterWords = await generateFiveLetterWordSet();\n        const tenLetterWords = await generateTenLetterWordSet();\n    \n        setCompoundWordSet(compoundWords.compoundWordSet);\n        setCorrectWord(compoundWords.randomCompoundWord);\n        setFiveLetterWordSet(fiveLetterWords.fiveLetterWordSet);\n        setTenLetterWordSet(tenLetterWords.tenLetterWordSet);\n      };\n    \n      fetchData();\n    }, []);\n\n    const addLetter = (key) => {\n      let updatedKeys = [...keys0];\n      const emptyIndex = updatedKeys.findIndex((val) => val === '');\n      if (emptyIndex >= 0) {\n          updatedKeys[emptyIndex] = key.toUpperCase();\n          if (turnCounter < 3) {\n            updatedKeys[emptyIndex + 5] = key.toUpperCase();        \n      }}\n      setKeys0(updatedKeys);\n    };\n\n    const removeLetter = () => {\n      let updatedKeys = [...keys0];\n      const emptyIndex = updatedKeys.findIndex((val) => val === '');\n      if (emptyIndex > 0 && emptyIndex < 10) {\n          updatedKeys[emptyIndex - 1] = '';\n          if (turnCounter < 3) {\n            updatedKeys[emptyIndex + 4] = '';\n      }}\n      setKeys0(updatedKeys);\n    };\n\n    const findKeyboardColors = (colorKeys, value) => {\n        updateDordleColors(colorKeys, value, keys1, setKeys1DordleColors);\n        updateDordleColors(colorKeys, value, keys2, setKeys2DordleColors);\n        updateDordleColors(colorKeys, value, keys3, setKeys3DordleColors);\n    };\n\n    useEffect(() => {\n        findKeyboardColors(greyKeys, 0)\n        findKeyboardColors(yellowKeys, 1)\n        findKeyboardColors(greenKeys, 2)\n    }, [greenKeys, yellowKeys, greyKeys]);\n\n    const registerAndReset = (updatedGuessColors) => {\n      if (turnCounter < 3) {\n        // Reveal keys for word guess\n        setKeys0DordleColors(updatedGuessColors)\n        // Record guess colors in bottom table\n        setGuessColors((prevGuessColors) => {\n          const newGuessColors = [...prevGuessColors];\n          newGuessColors[turnCounter] = updatedGuessColors;\n          return newGuessColors;\n        });\n        // Record guess letters in bottom table\n        setGuesses((prevGuesses) => {\n          const newGuesses = [...prevGuesses];\n          newGuesses[turnCounter] = [...keys0];\n          return newGuesses;\n        });\n        // Reset guess keys to blank and white\n        setTimeout(() => {\n          setKeys0DordleColors([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1])\n          setKeys0([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"])\n          setTurnCounter((prevTurnCounter) => prevTurnCounter + 1);\n          disableKeyPressRef.current = false;\n        }, 1000);\n      // Logic for final guess\n      } else if (turnCounter === 3) {\n        setKeys0DordleColors(updatedGuessColors);\n        const hasNonGreenColors = updatedGuessColors.some(color => color !== 2);\n        // Incorrect, so reset with new word\n        if (hasNonGreenColors) {\n          setSymbolResponse(\"times\");\n          setWordReveal(correctWord);\n          setTimeout(() => {\n            const compoundWordArray = Array.from(compoundWordSet);\n            const newCompoundWordSet = compoundWordArray.filter(word => word !== correctWord);\n            const randomCompoundWord = newCompoundWordSet[Math.floor(Math.random() * newCompoundWordSet.length)];\n            setCorrectWord(randomCompoundWord);\n            setKeys0DordleColors([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]);\n            setGuesses([\n              [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n              [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n              [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n              [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n            ]);           \n            setGuessColors([\n              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1], \n              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\n              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],\n              [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n            ]);\n            setKeys0DordleColors([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]);\n            setKeys1DordleColors([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]);\n            setKeys2DordleColors([-1, -1, -1, -1, -1, -1, -1, -1, -1]);\n            setKeys3DordleColors([-1, -1, -1, -1, -1, -1, -1]);\n            setGreenKeys([]);\n            setYellowKeys([]);\n            setGreyKeys([]);\n            setKeys0([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n            setTurnCounter(0);\n            setSymbolResponse(\"\");\n            setWordReveal(\"\");\n            disableKeyPressRef.current = false;\n          }, 2000);\n        // Correct, so level complete, return home\n        } else {\n          setSymbolResponse(\"check\");\n          setTimeout(() => {\n            let newKeysColor = [...keysColor];\n            newKeysColor[0][6] = 1;\n            setKeysColor(newKeysColor);\n            setGameChosen({ gameChosen: false, gameNumber: '' });\n            setSymbolResponse(\"\");\n            disableKeyPressRef.current = false;\n          }, 2000); \n        }\n      }\n    }\n\n    const findGrey = (wordGuess1, wordGuess2, updatedGuessColors, uniqueGreenKeys, uniqueYellowKeys) => {\n      if (turnCounter < 3) {\n        let newGreyKeys = [...greyKeys]\n        for (let i = 0; i < 5; i++) {\n          if (wordGuess1[i] !== \"_\") {\n            newGreyKeys.push(wordGuess1[i])\n            updatedGuessColors[i] = 0;\n          }\n          if (wordGuess2[i] !== \"_\") {\n            newGreyKeys.push(wordGuess2[i])\n            updatedGuessColors[i + 5] = 0;\n          }\n        }\n        let uniqueGreyKeys = [...new Set(newGreyKeys)];\n        // Remove values from uniqueGreyKeys if they are also present in greenKeys or yellowKeys\n        uniqueGreyKeys = uniqueGreyKeys.filter(key => !uniqueGreenKeys.includes(key) && !uniqueYellowKeys.includes(key));\n        setGreyKeys(uniqueGreyKeys)\n        registerAndReset(updatedGuessColors)\n      } else if (turnCounter === 3) {\n        let newGreyKeys = [...greyKeys]\n        for (let i = 0; i < 10; i++) {\n          if (wordGuess1[i] !== \"_\") {\n            newGreyKeys.push(wordGuess1[i])\n            updatedGuessColors[i] = 0;\n          }\n        }\n        let uniqueGreyKeys = [...new Set(newGreyKeys)];\n        // Remove values from uniqueGreyKeys if they are also present in greenKeys or yellowKeys\n        uniqueGreyKeys = uniqueGreyKeys.filter(key => !uniqueGreenKeys.includes(key) && !uniqueYellowKeys.includes(key));\n        setGreyKeys(uniqueGreyKeys)\n        registerAndReset(updatedGuessColors)\n      }\n    }\n\n    const findYellow = (wordGuess1, compound1, updatedGuessColors, compound2,  wordGuess2, uniqueGreenKeys) => {\n      if (turnCounter < 3) {\n        let newCompound1 = compound1.join(\"\")\n        let newCompound2 = compound2.join(\"\")\n        let newYellowKeys = [...yellowKeys];\n        for (let i = 0; i < 5; i++) {\n          if (newCompound1.includes(wordGuess1[i]) && wordGuess1[i] !== \"_\") {\n            newYellowKeys.push(wordGuess1[i])\n            updatedGuessColors[i] = 1;\n            newCompound1 = newCompound1.replace(wordGuess1[i], \"_\");\n            wordGuess1[i] = \"_\";\n          }\n          if (newCompound2.includes(wordGuess2[i]) && wordGuess2[i] !== \"_\") {\n            newYellowKeys.push(wordGuess2[i])\n            updatedGuessColors[i + 5] = 1;\n            newCompound2 = newCompound2.replace(wordGuess2[i], \"_\");\n            wordGuess2[i] = \"_\";\n          }\n        }\n        let uniqueYellowKeys = [...new Set(newYellowKeys)];\n        // Remove values from uniqueYellowKeys if they are also present in greenKeys\n        uniqueYellowKeys = uniqueYellowKeys.filter(key => !uniqueGreenKeys.includes(key));\n        setYellowKeys(uniqueYellowKeys)\n        findGrey(wordGuess1, wordGuess2, updatedGuessColors, uniqueGreenKeys, uniqueYellowKeys)\n      } else if (turnCounter === 3) {\n        let newCorrectWord = compound1.join(\"\");\n        let newYellowKeys = [...yellowKeys];\n        for (let i = 0; i < 10; i++) {\n          if (newCorrectWord.includes(wordGuess1[i]) && wordGuess1[i] !== \"_\") {\n            newYellowKeys.push(wordGuess1[i])\n            updatedGuessColors[i] = 1;\n            newCorrectWord = newCorrectWord.replace(wordGuess1[i], \"_\");\n            wordGuess1[i] = \"_\";\n          }\n        }\n        let uniqueYellowKeys = [...new Set(newYellowKeys)];\n        // Remove values from uniqueYellowKeys if they are also present in greenKeys\n        uniqueYellowKeys = uniqueYellowKeys.filter(key => !uniqueGreenKeys.includes(key));\n        setYellowKeys(uniqueYellowKeys)\n        findGrey(wordGuess1, null, updatedGuessColors, uniqueGreenKeys, uniqueYellowKeys)\n      }\n    }\n\n    const findGreen = (wordGuess) => {\n      disableKeyPressRef.current = true;\n      if (turnCounter < 3) {\n        let compound1 = [...correctWord.slice(0,5)];\n        let compound2 = [...correctWord.slice(5,10)];\n        let wordGuess1 = [...wordGuess];\n        let wordGuess2 = [...wordGuess];\n        let updatedGuessColors = [...keys0DordleColors];\n        let newGreenKeys = [...greenKeys];\n        for (let i = 0; i < 5; i++) {\n          if (wordGuess[i] === compound1[i]) {\n            newGreenKeys.push(wordGuess1[i])\n            wordGuess1[i] = \"_\";\n            compound1[i] = \"_\";\n            updatedGuessColors[i] = 2;\n          }\n          if (wordGuess2[i] === compound2[i]) {\n            newGreenKeys.push(wordGuess2[i])\n            wordGuess2[i] = \"_\";\n            compound2[i] = \"_\";\n            updatedGuessColors[i + 5] = 2;\n          }\n        }\n        let uniqueGreenKeys = [...new Set(newGreenKeys)];\n        setGreenKeys(uniqueGreenKeys)\n        findYellow(wordGuess1, compound1, updatedGuessColors, compound2,  wordGuess2, uniqueGreenKeys)\n      } else if (turnCounter === 3) {\n        let newCorrectWord = [...correctWord];\n        let wordGuess1 = [...wordGuess]\n        let updatedGuessColors = [...keys0DordleColors];\n        let newGreenKeys = [...greenKeys];\n        for (let i = 0; i < 10; i++) {\n          if (wordGuess1[i] === newCorrectWord[i]) {\n            newGreenKeys.push(wordGuess1[i])\n            wordGuess1[i] = \"_\";\n            newCorrectWord[i] = \"_\";\n            updatedGuessColors[i] = 2;\n        }}\n        let uniqueGreenKeys = [...new Set(newGreenKeys)];\n        setGreenKeys(uniqueGreenKeys)\n        findYellow(wordGuess1, newCorrectWord, updatedGuessColors, null, null, uniqueGreenKeys)\n      }\n    }\n\n    const checkWord = () => {\n      if (keys0.includes(\"\")) return;\n      if (turnCounter < 3) {\n        const wordGuess = keys0.slice(0, 5).join('');\n        if (fiveLetterWordSet.has(wordGuess.toLowerCase())) {\n          findGreen(wordGuess.toLowerCase());\n        } else {\n          disableKeyPressRef.current = true;\n          setSymbolResponse(\"times\");\n          setTimeout(() => {\n            setKeys0([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n            setSymbolResponse(\"\");\n            disableKeyPressRef.current = false;\n        }, 1000);\n        }\n      } else if (turnCounter === 3) {\n        const wordGuess = keys0.join('');\n        if (tenLetterWordSet.has(wordGuess.toLowerCase())) {\n          findGreen(wordGuess.toLowerCase());\n        } else {\n          disableKeyPressRef.current = true;\n          setSymbolResponse(\"times\");\n          setTimeout(() => {\n            setKeys0([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n            setSymbolResponse(\"\");\n            disableKeyPressRef.current = false;\n        }, 1000);\n      }}\n    }\n\n    useEffect(() => {\n      checkWord()\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [keys0]);\n\n    const handleKeyboard = useCallback((event) => {\n      if (disableKeyPressRef.current) {\n        event.preventDefault();\n        return;\n      } else if (event.key === \"Backspace\") {\n          removeLetter()\n      } else if (event.key === \" \") {\n          setGameChosen({gameChosen: false, gameNumber: ''});\n      } else {\n          fauxKeys0.forEach((key) => {\n              if (event.key.toUpperCase() === key.toUpperCase()) {\n                  removeLetter()\n              }            \n          });\n          for (const keys of allKeys) {\n            for (const key of keys) {\n              if (event.key.toLowerCase() === key.toLowerCase()) {\n                addLetter(key);\n                break;\n              }\n            }\n          }\n        }\n    }, [fauxKeys0, allKeys]);\n\n    useKeydownEffect(handleKeyboard, [handleKeyboard]);\n\n    return (\n        <div className=\"keyboard\" onKeyDown={handleKeyboard}>\n            <Keyboard7Context.Provider\n                value={{\n                addLetter,\n                removeLetter,\n                guesses,\n                guessColors,\n                turnCounter,\n                disableKeyPressRef}}>\n            <div className='line0'>{keys0.map((key, index) => {\n                const uniqueKey = `0-${index}`;\n                return (\n                  <React.Fragment key={uniqueKey}>\n                  <Key keyVal={key} dark color={keys0DordleColors[index]} keyLine={0} />\n                  {index === 4 && turnCounter < 3 && <div className='divider'>|</div>}\n                  </React.Fragment>\n                );\n            })}</div>\n            <div className='line1'>\n                {keys1.map((key, index) => {\n                const uniqueKey = `1-${index}`;\n                return <Key keyVal={key} color={keys1DordleColors[index]} \n                  key={uniqueKey} keyLine={1} />;\n            })}</div>\n            <div className='line2'>\n              {keys2.map((key, index) => {\n              const uniqueKey = `2-${index}`;\n              return <Key keyVal={key} color={keys2DordleColors[index]} \n              key={uniqueKey} keyLine={2} />;\n              })}\n            </div>\n            <div className='line3'>{keys3.map((key, index) => {\n              const uniqueKey = `3-${index}`;\n                return <Key keyVal={key} color={keys3DordleColors[index]} \n                  key={uniqueKey} keyLine={3} />;\n                })}\n            </div>\n            <div className='line4'>< Spacebar keyVal={symbolResponse} /></div>\n            {wordReveal ? (<h1>{wordReveal.toUpperCase()}</h1>) : (<div className='line5'><DordleGuesses /></div>)}\n            </Keyboard7Context.Provider>\n        </div>\n    )\n\n}\n\nexport default Keyboard7","import React, { useContext } from 'react'\nimport { AppContext } from '../../App';\nimport { FaCheck, FaTimes } from '../IconModule';\n\nfunction Spacebar({ keyVal }) {\n  const { setGameChosen } = useContext(AppContext);\n  const selectLetter = () => {\n    setGameChosen({gameChosen: false, gameNumber: ''});\n    };\n\n  let iconComponent = null;\n  let iconColorClass = '';\n\n  if (keyVal === 'check') {\n    iconComponent = <FaCheck />;\n    iconColorClass = 'check-color';\n  } else if (keyVal === 'times') {\n    iconComponent = <FaTimes />;\n    iconColorClass = 'times-color';\n  }\n  \n\n  return (\n      <div className={`key spacebar ${iconColorClass}`} onClick={selectLetter}>\n        {iconComponent}\n      </div>\n    )\n}\n\nexport default Spacebar"],"names":["_ref","boxColor","keyVal","color","_jsx","className","style","backgroundColor","children","_useContext","useContext","Keyboard7Context","guesses","guessColors","turnCounter","_jsxs","map","key","index","uniqueKey","concat","React","DordleBox","dark","keyLine","addLetter","removeLetter","disableKeyPressRef","onClick","current","createContext","AppContext","setGameChosen","keysColor","setKeysColor","_useState","useState","_useState2","_slicedToArray","keys0","setKeys0","keys1","keys2","keys3","allKeys","_useState3","_useState4","keys0DordleColors","setKeys0DordleColors","_useState5","_useState6","keys1DordleColors","setKeys1DordleColors","_useState7","_useState8","keys2DordleColors","setKeys2DordleColors","_useState9","_useState10","keys3DordleColors","setKeys3DordleColors","_useState11","_useState12","greenKeys","setGreenKeys","_useState13","_useState14","yellowKeys","setYellowKeys","_useState15","_useState16","greyKeys","setGreyKeys","_useState17","_useState18","setGuesses","_useState19","_useState20","setGuessColors","_useState21","_useState22","setTurnCounter","fauxKeys0","_useState23","Set","_useState24","compoundWordSet","setCompoundWordSet","_useState25","_useState26","fiveLetterWordSet","setFiveLetterWordSet","_useState27","_useState28","tenLetterWordSet","setTenLetterWordSet","_useState29","_useState30","correctWord","setCorrectWord","_useState31","_useState32","wordReveal","setWordReveal","_useState33","_useState34","symbolResponse","setSymbolResponse","useRef","generateCompoundWordSet","_asyncToGenerator","_regeneratorRuntime","mark","_callee","randomCompoundWord","wrap","_context","prev","next","compoundWordBank","_toConsumableArray","Math","floor","random","size","abrupt","stop","apply","arguments","generateFiveLetterWordSet","_ref2","_callee2","_context2","fiveLetterWordBank","generateTenLetterWordSet","_ref3","_callee3","_context3","tenLetterWordBank","useEffect","fetchData","_ref4","_callee4","compoundWords","fiveLetterWords","tenLetterWords","_context4","sent","updatedKeys","emptyIndex","findIndex","val","toUpperCase","findKeyboardColors","colorKeys","value","updateDordleColors","registerAndReset","updatedGuessColors","prevGuessColors","newGuessColors","prevGuesses","newGuesses","setTimeout","prevTurnCounter","some","newCompoundWordSet","Array","from","filter","word","length","newKeysColor","gameChosen","gameNumber","findGrey","wordGuess1","wordGuess2","uniqueGreenKeys","uniqueYellowKeys","newGreyKeys","i","push","uniqueGreyKeys","includes","findYellow","compound1","compound2","newCompound1","join","newCompound2","newYellowKeys","replace","newCorrectWord","findGreen","wordGuess","slice","newGreenKeys","has","toLowerCase","checkWord","handleKeyboard","useCallback","event","preventDefault","forEach","_i4","_allKeys","_step","keys","_iterator","_createForOfIteratorHelper","s","n","done","err","e","f","useKeydownEffect","onKeyDown","Provider","Key","Spacebar","DordleGuesses","iconComponent","iconColorClass","FaCheck","FaTimes"],"sourceRoot":""}
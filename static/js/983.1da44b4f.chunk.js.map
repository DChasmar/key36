{"version":3,"file":"static/js/983.1da44b4f.chunk.js","mappings":"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","sources":["components/GameY/KeyY.js","components/GameY/KeyboardY.js","components/GameY/SpacebarY.js"],"sourcesContent":["import React, { useContext } from 'react'\nimport { KeyboardYContext } from './KeyboardY';\nimport { GiDeer, GiDrippingHoney, GiCakeSlice, GiSlipknot, GiWeight } from 'react-icons/gi';\nimport { AiFillEye } from 'react-icons/ai';\nimport { BsArrowLeft, BsCalendarDay, BsTrash3 } from 'react-icons/bs';\nimport { TbSum, TbHexagonLetterA, TbHexagonLetterC, TbHexagonLetterL, TbHexagonLetterR, TbHexagonLetterU } from 'react-icons/tb';\nimport { PiNumberSquareTwoBold, PiNumberCircleFourBold, PiNumberCircleEightBold } from 'react-icons/pi';\nimport { FaStarHalf } from 'react-icons/fa';\nimport { BiAngry } from 'react-icons/bi';\n\n\nfunction Key({ keyVal, keyLine, guessKey }) {\n  const { addLetter, removeLetter } = useContext(KeyboardYContext);\n  const selectLetter = () => {\n    if (keyLine === 1 || keyLine === 2 || keyLine === 3) {\n      addLetter(keyVal);\n    } else if (keyLine === 0) {\n      removeLetter();\n    };\n  };\n\n  let iconComponent = null;\n\n  if (keyVal === 'deer') {\n    iconComponent = <GiDeer />;\n  } else if (keyVal === 'honey') {\n    iconComponent = <GiDrippingHoney />; \n  } else if (keyVal === 'eye') {\n    iconComponent = <AiFillEye />; \n  } else if (keyVal === 'arrow') {\n    iconComponent = <BsArrowLeft />; \n  } else if (keyVal === 'sum') {\n    iconComponent = <TbSum />; \n  } else if (keyVal === 'cake') {\n    iconComponent = <GiCakeSlice />; \n  } else if (keyVal === 'four') {\n    iconComponent = <PiNumberCircleFourBold />; \n  } else if (keyVal === 'u') {\n    iconComponent = <TbHexagonLetterU />; \n  } else if (keyVal === 'can') {\n    iconComponent = <BsTrash3 />; \n  } else if (keyVal === 'knot') {\n    iconComponent = <GiSlipknot />; \n  } else if (keyVal === 'weight') {\n    iconComponent = <GiWeight />; \n  } else if (keyVal === 'two') {\n    iconComponent = <PiNumberSquareTwoBold />; \n  } else if (keyVal === 'c') {\n    iconComponent = <TbHexagonLetterC />; \n  } else if (keyVal === 'l') {\n    iconComponent = <TbHexagonLetterL />; \n  } else if (keyVal === 'eight') {\n    iconComponent = <PiNumberCircleEightBold />; \n  } else if (keyVal === 'r') {\n    iconComponent = <TbHexagonLetterR />;\n  } else if (keyVal === 'half') {\n    iconComponent = <FaStarHalf />; \n  } else if (keyVal === 'a') {\n    iconComponent = <TbHexagonLetterA />; \n  } else if (keyVal === 'gr') {\n    iconComponent = <BiAngry />; \n  } else if (keyVal === 'day') {\n    iconComponent = <BsCalendarDay />; \n  } else {\n    iconComponent = keyVal;\n  };\n\n  return (\n      <div className={ guessKey ? 'key guess_key' : 'key' } onClick={selectLetter}>\n        {iconComponent}\n      </div>\n    )\n}\n\nexport default Key","import React, { useCallback, useContext, useEffect, useState, createContext, useRef } from 'react';\nimport { AppContext } from '../../App';\nimport { useKeydownEffect } from '../../utils';\nimport Key from './KeyY';\nimport Spacebar from './SpacebarY';\n\nexport const KeyboardYContext = createContext();\n\nfunction KeyboardY() {\n    const { setGameChosen, keysColor, setKeysColor } = useContext(AppContext);\n    const [keys0, setKeys0] = useState([\"deer\", \"deer\", \"deer\", \"deer\", \" \", \"honey\", \"honey\", \"honey\", \"honey\", \"honey\"]);\n    const keys1 = [\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"];\n    const keys2 = [\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\"];\n    const keys3 = [\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\"];\n\n    const fauxKeys0 = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]\n    const allKeys = [keys1, keys2, keys3]\n\n    const [noteList, setNoteList] = useState([])\n\n    const codeWords = [\n        [\"deer\", \"deer\", \"deer\", \"deer\", \" \", \"honey\", \"honey\", \"honey\", \"honey\", \"honey\"], \n        [ \"eye\", \" \", \"arrow\", \"arrow\", \"arrow\", \"arrow\", \" \", \n        \"sum\", \"sum\", \"sum\", \"sum\", \" \", \"cake\", \"cake\", \"cake\", \"cake\",\n         \" \", \"four\", \"four\", \"four\", \" \", \"u\", \"u\", \"u\"],\n        [\"eye\", \" \", \"can\", \"can\", \"can\", \"knot\", \"knot\", \"knot\", \" \",\n        \"weight\", \"weight\", \"weight\", \"weight\"],\n        [\"two\", \"two\", \" \", \"c\", \"c\", \"c\",\n        \" \", \"u\", \"u\", \"u\", \" \", \"l\", \"eight\", 'eight', 'eight', \"r\"],\n        [\"half\", \"half\", \"half\", \"half\", \" \", \"a\", \" \", \n        'gr', 'gr', 'eight', 'eight', 'eight', \" \", \"day\", \"day\", \"day\"],\n        [\"\"]\n    ];\n\n    const realWords = [\n        \"DEAR HONEY\", \n        \"I LEFT SOME CAKE FOR YOU\", \n        \"I CANNOT WAIT\", \n        \"TO SEE YOU LATER\", \n        \"HAVE A GREAT DAY\"\n    ];\n\n    const alternateWords = [\n        \"DEER HONEY\", \n        \"I LEFT SOME CAKE FOR YOU\", \n        \"I CANNOT WAIT\", \n        \"TO SEE YOU LATER\", \n        \"HALF A GREAT DAY\"\n    ];\n\n    const note = [\n        \"Dear Honey, \",\n        \"I left some cake for you. \",\n        \"I cannot wait \", \n        \"to see you later. \",\n        \"Have a great day.\"\n    ];\n\n    const letters = [\n        \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \n        \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \n        \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n    ];\n\n    const [counter, setCounter] = useState(0)\n\n    const [symbolResponse, setSymbolResponse] = useState(\"\")\n\n    const disableKeyPressRef = useRef(false);\n\n    const gameOver = () => {\n        let newKeysColor = [...keysColor];\n        newKeysColor[1][5] = 1;\n        setKeysColor(newKeysColor);\n        setGameChosen({ gameChosen: false, gameNumber: '' });\n    }\n\n    const goodWord = () => {\n        setSymbolResponse(\"check\");\n        disableKeyPressRef.current = true;\n        \n        setNoteList((prevNoteList) => {\n            const newNoteList = [...prevNoteList];\n            newNoteList.push(note[counter]);\n            return newNoteList;\n        });\n\n        setCounter((prevCounter) => prevCounter + 1);\n\n        setTimeout(() => {\n            if (counter < 4){\n                setKeys0(codeWords[counter + 1]);\n            }\n            setSymbolResponse(\"\");\n            disableKeyPressRef.current = false;\n            if (counter === 4) {\n                gameOver()\n            }\n        }, 1000);\n    }\n\n    const badWord = () => {\n        setSymbolResponse(\"times\");\n        disableKeyPressRef.current = true;\n        setTimeout(() => {\n            setKeys0(codeWords[counter]);\n            setSymbolResponse(\"\");\n            disableKeyPressRef.current = false;\n        }, 1000);\n    }\n    \n    const addLetter = (key) => {\n        let updatedKeys = [...keys0];\n        const emptyIndex = updatedKeys.findIndex((val) => !letters.includes(val) && val !== \" \");\n        if (emptyIndex >= 0) {\n            updatedKeys[emptyIndex] = key.toUpperCase();        \n        }\n        setKeys0(updatedKeys);\n    }\n\n    const removeLetter = () => {\n        let updatedKeys = [...keys0];\n        const emptyIndex = updatedKeys.findIndex((val) => !letters.includes(val) && val !== \" \");\n        if (emptyIndex > 0) {\n            if (updatedKeys[emptyIndex - 1] === \" \") {\n                updatedKeys[emptyIndex - 2] = codeWords[counter][emptyIndex - 2];\n            } else {\n                updatedKeys[emptyIndex - 1] = codeWords[counter][emptyIndex - 1];\n            }\n        }\n        setKeys0(updatedKeys);\n    }\n\n    const checkWord = () => {\n        if (keys0.some((val) => !letters.includes(val) && val !== \" \")) return;\n        if (keys0.join('') === realWords[counter] || keys0.join('') === alternateWords[counter]) {\n            goodWord()\n        } else {\n            badWord()\n        }\n    }\n\n    useEffect(() => {\n        checkWord()\n    }, [keys0]);\n\n    const handleKeyboard = useCallback((event) => {\n\n        if (disableKeyPressRef.current) {\n            event.preventDefault();\n            return;\n        } else if (event.key === \"Backspace\") {\n            removeLetter()\n        } else if (event.key === \" \") {\n            setGameChosen({gameChosen: false, gameNumber: ''});\n        } else {\n            fauxKeys0.forEach((key) => {\n                if (event.key.toUpperCase() === key.toUpperCase()) {\n                    removeLetter()\n                }            \n            });\n            for (const keys of allKeys) {\n              for (const key of keys) {\n                if (event.key.toLowerCase() === key.toLowerCase()) {\n                  addLetter(key);\n                  break;\n                }\n              }\n            }\n          }\n    }, [fauxKeys0, allKeys]);\n\n    useKeydownEffect(handleKeyboard, [handleKeyboard]);\n\n    return (\n        <div className=\"keyboard\" onKeyDown={handleKeyboard}>\n            <KeyboardYContext.Provider\n                value={{\n                addLetter,\n                removeLetter\n                }}>\n            <div className='line0'>{keys0.map((key, index) => {\n                const uniqueKey = `0-${index}`;\n                return <Key keyVal={key} key={uniqueKey} keyLine={0} guessKey />;\n            })}</div>\n            <div className='line1'>{keys1.map((key, index) => {\n                const uniqueKey = `1-${index}`;\n                return <Key keyVal={key} key={uniqueKey} keyLine={1} />;\n            })}</div>\n            <div className='line2'>\n                {keys2.map((key, index) => {\n                const uniqueKey = `2-${index}`;\n                return <Key keyVal={key} key={uniqueKey} keyLine={2} />;\n            })}</div>\n            <div className='line3'>{keys3.map((key, index) => {\n                const uniqueKey = `3-${index}`;\n                return <Key keyVal={key} key={uniqueKey} keyLine={3} />;\n            })}</div>\n            <div className='line4'>< Spacebar keyVal={symbolResponse} /></div>\n            <div className=\"note_box\">\n                {noteList.slice(0, counter).map((line, index) => (\n                <p key={index} className=\"word_box_word\">{line}</p>\n            ))}</div>\n            </KeyboardYContext.Provider>\n        </div>\n    )\n\n}\n\nexport default KeyboardY","import React, { useContext } from 'react'\nimport { AppContext } from '../../App';\nimport { FaCheck, FaTimes } from '../IconModule';\n\nfunction Spacebar({ keyVal }) {\n  const { setGameChosen} = useContext(AppContext);\n  const selectLetter = () => {\n    setGameChosen({gameChosen: false, gameNumber: ''});\n    };\n\n    let iconComponent = null;\n    let iconColorClass = '';\n\n    if (keyVal === 'check') {\n      iconComponent = <FaCheck />;\n      iconColorClass = 'check-color';\n    } else if (keyVal === 'times') {\n      iconComponent = <FaTimes />;\n      iconColorClass = 'times-color';\n  }\n\n  return (\n      <div className={`key spacebar ${iconColorClass}`}  onClick={selectLetter}>\n        {iconComponent}\n      </div>\n    )\n}\n\nexport default Spacebar"],"names":["_ref","keyVal","keyLine","guessKey","_useContext","useContext","KeyboardYContext","addLetter","removeLetter","iconComponent","_jsx","GiDeer","GiDrippingHoney","AiFillEye","BsArrowLeft","TbSum","GiCakeSlice","PiNumberCircleFourBold","TbHexagonLetterU","BsTrash3","GiSlipknot","GiWeight","PiNumberSquareTwoBold","TbHexagonLetterC","TbHexagonLetterL","PiNumberCircleEightBold","TbHexagonLetterR","FaStarHalf","TbHexagonLetterA","BiAngry","BsCalendarDay","className","onClick","children","createContext","AppContext","setGameChosen","keysColor","setKeysColor","_useState","useState","_useState2","_slicedToArray","keys0","setKeys0","keys1","keys2","keys3","fauxKeys0","allKeys","_useState3","_useState4","noteList","setNoteList","codeWords","realWords","alternateWords","note","letters","_useState5","_useState6","counter","setCounter","_useState7","_useState8","symbolResponse","setSymbolResponse","disableKeyPressRef","useRef","goodWord","current","prevNoteList","newNoteList","_toConsumableArray","push","prevCounter","setTimeout","newKeysColor","gameChosen","gameNumber","gameOver","key","updatedKeys","emptyIndex","findIndex","val","includes","toUpperCase","checkWord","some","join","useEffect","handleKeyboard","useCallback","event","preventDefault","forEach","_i","_allKeys","length","_step","keys","_iterator","_createForOfIteratorHelper","s","n","done","value","toLowerCase","err","e","f","useKeydownEffect","onKeyDown","_jsxs","Provider","map","index","uniqueKey","concat","Key","Spacebar","slice","line","iconColorClass","FaCheck","FaTimes"],"sourceRoot":""}
{"version":3,"file":"static/js/783.7c871f96.chunk.js","mappings":"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","sources":["components/GameX/KeyX.js","components/GameX/KeyboardX.js","components/GameX/SpacebarX.js"],"sourcesContent":["import React, { useContext } from 'react'\nimport { KeyboardXContext } from './KeyboardX';\nimport { GoDotFill } from '../IconModule';\n\nfunction Key({ keyVal, guessKey, keyLine, clickableKey, symbol }) {\n  const { addNumber } = useContext(KeyboardXContext);\n  const selectLetter = () => {\n    if (clickableKey) {\n      addNumber(keyVal); \n    }\n  };\n\n  let iconComponent = null;\n\n  if ((keyLine === 1 || keyLine === 2) && keyVal === \"\") {\n    iconComponent = <GoDotFill />;\n  } else {\n    iconComponent = keyVal;\n  }\n\n  return (\n      <div className={symbol ? 'key mathsymbol_key' : guessKey ? 'key guess_key' : 'key'} onClick={selectLetter}>\n        {iconComponent}\n      </div>\n    )\n}\n\nexport default Key","import React, { useCallback, useContext, useEffect, useState, createContext, useRef } from 'react';\nimport { AppContext } from '../../App';\nimport { useKeydownEffect } from '../../utils';\nimport Key from './KeyX';\nimport Spacebar from './SpacebarX';\n\nexport const KeyboardXContext = createContext();\n\nfunction KeyboardX() {\n    const { setGameChosen, keysColor, setKeysColor } = useContext(AppContext);\n    const [keys0, setKeys0] = useState([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]);\n    const [keys1, setKeys1] = useState([\"\", \"\", \"\", \"+\", \"\", \"\", \"\", \"=\", \"\", \"\", \"\", \"\"]);\n\n    const indicesToCheck = [0, 1, 2, 4, 5, 6];\n\n    const [symbolResponse, setSymbolResponse] = useState(\"\");\n\n    const disableKeyPressRef = useRef(false);\n\n    const gameOver = () => {\n        setSymbolResponse(\"check\");\n        setTimeout(() => {\n            let newKeysColor = [...keysColor];\n            newKeysColor[3][1] = 1;\n            setKeysColor(newKeysColor);\n            setGameChosen({ gameChosen: false, gameNumber: '' });\n        }, 1000);\n    }\n\n    const resetBadSum = () => {\n        disableKeyPressRef.current = true;\n        setSymbolResponse(\"times\");\n        setTimeout(() => {\n            setKeys0([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]);\n            setKeys1([\"\", \"\", \"\", \"+\", \"\", \"\", \"\", \"=\", \"\", \"\", \"\", \"\"]);\n            setSymbolResponse(\"\");\n            disableKeyPressRef.current = false;\n        }, 2000);\n    }\n\n    const findSum = () => {\n        let newKeys0 = [...keys0];\n        let newKeys1 = [...keys1];\n        if (indicesToCheck.every(index => keys1[index] !== \"\") && keys1.includes(\"\")) {\n            const keys1Int1 = parseInt(keys1.slice(0,3).join(\"\"));\n            const keys1Int2 = parseInt(keys1.slice(4,7).join(\"\"));\n            const sum = keys1Int1+keys1Int2;\n            const digitsArray = sum.toString().split('');\n            const allDigitsExistInKeys0 = digitsArray.every((digit) => keys0.includes(digit)) && new Set(digitsArray).size === digitsArray.length;\n            if (allDigitsExistInKeys0) {\n                newKeys1[8] = digitsArray[0];\n                newKeys1[9] = digitsArray[1];\n                newKeys1[10] = digitsArray[2];\n                newKeys1[11] = digitsArray[3];\n                setKeys1(newKeys1);\n                digitsArray.forEach((val) => {\n                    let returnIndex = keys0.indexOf(val);\n                    newKeys0[returnIndex] = \"\";\n                })\n                setKeys0(newKeys0);\n                gameOver();\n            } else {\n                let newDigitsArray = [...digitsArray];\n                digitsArray.forEach((val) => {\n                    if (!keys0.includes(val)) {\n                        let returnIndex = digitsArray.indexOf(val);\n                        newDigitsArray[returnIndex] = \"\";\n                    };\n                })\n                newKeys1[8] = digitsArray[0];\n                newKeys1[9] = digitsArray[1];\n                newKeys1[10] = digitsArray[2];\n                newKeys1[11] = digitsArray[3];\n                setKeys1(newKeys1);\n                resetBadSum();\n            }\n        }\n    };\n\n    useEffect(() => {\n        findSum()\n    }, [keys1]);\n\n    const addNumber = (key) => {\n        let newKeys0 = [...keys0]\n        let newKeys1 = [...keys1]\n        let newPlayableArray = [...indicesToCheck.map(index => keys1[index])];\n        if (keys0.includes(key)) {\n            const emptyIndex = newPlayableArray.findIndex((val) => val === \"\");\n            const keyIndex = newKeys0.findIndex((val) => val === key);\n            if (emptyIndex < 3) {\n                newKeys1[emptyIndex] = key;\n                setKeys1(newKeys1)\n            } else if (emptyIndex > 2) {\n                newKeys1[emptyIndex + 1] = key;\n                setKeys1(newKeys1)\n            } else {\n                return\n            }\n            newKeys0[keyIndex] = \"\";\n            setKeys0(newKeys0)\n        }\n        \n    }\n\n    const handleKeyboard = useCallback((event) => {\n        if (disableKeyPressRef.current) {\n            event.preventDefault();\n            return;\n        } else if (event.key === \" \") {\n            setGameChosen({gameChosen: false, gameNumber: ''});\n        } else {\n            keys0.forEach((key) => {\n                if (event.key === key) {\n                    addNumber(key)\n            }});\n        }\n    });\n\n    useKeydownEffect(handleKeyboard, [handleKeyboard]);\n\n    return (\n        <div className=\"keyboard\" onKeyDown={handleKeyboard}>\n            <KeyboardXContext.Provider\n                value={{\n                addNumber}}>\n            <div className='line0'>{keys0.map((key, index) => {\n                const uniqueKey = `0-${index}`;\n                return <Key keyVal={key} key={uniqueKey} clickableKey={true} keyLine={0} />;\n            })}</div>\n            <div className='line1'>\n                {keys1.map((key, index) => {\n                const uniqueKey = `1-${index}`;\n                const isSymbol = index === 3 || index === 7;\n                return <Key keyVal={key} key={uniqueKey} clickableKey={false} symbol={isSymbol ? true : undefined} keyLine={1} guessKey={!isSymbol} />;\n            })}</div>\n            <div className='line3'>< Spacebar keyVal={symbolResponse} /></div>\n            </KeyboardXContext.Provider>\n        </div>\n    )\n\n}\n\nexport default KeyboardX","import React, { useContext } from 'react'\nimport { AppContext } from '../../App';\nimport { FaCheck, FaTimes } from '../IconModule';\n\nfunction Spacebar({ keyVal }) {\n  const { setGameChosen} = useContext(AppContext);\n  const selectLetter = () => {\n    setGameChosen({gameChosen: false, gameNumber: ''});\n    };\n\n    let iconComponent = null;\n    let iconColorClass = '';\n\n    if (keyVal === 'check') {\n      iconComponent = <FaCheck />;\n      iconColorClass = 'check-color';\n    } else if (keyVal === 'times') {\n      iconComponent = <FaTimes />;\n      iconColorClass = 'times-color';\n  }\n\n  return (\n      <div className={`key spacebar ${iconColorClass}`}  onClick={selectLetter}>\n        {iconComponent}\n      </div>\n    )\n}\n\nexport default Spacebar"],"names":["_ref","keyVal","guessKey","keyLine","clickableKey","symbol","addNumber","useContext","KeyboardXContext","iconComponent","_jsx","GoDotFill","className","onClick","children","createContext","_useContext","AppContext","setGameChosen","keysColor","setKeysColor","_useState","useState","_useState2","_slicedToArray","keys0","setKeys0","_useState3","_useState4","keys1","setKeys1","indicesToCheck","_useState5","_useState6","symbolResponse","setSymbolResponse","disableKeyPressRef","useRef","findSum","newKeys0","_toConsumableArray","newKeys1","every","index","includes","digitsArray","parseInt","slice","join","toString","split","digit","Set","size","length","forEach","val","returnIndex","indexOf","setTimeout","newKeysColor","gameChosen","gameNumber","newDigitsArray","current","useEffect","key","newPlayableArray","map","emptyIndex","findIndex","keyIndex","handleKeyboard","useCallback","event","preventDefault","useKeydownEffect","onKeyDown","_jsxs","Provider","value","uniqueKey","concat","Key","isSymbol","undefined","Spacebar","iconColorClass","FaCheck","FaTimes"],"sourceRoot":""}
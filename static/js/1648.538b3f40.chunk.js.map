{"version":3,"file":"static/js/1648.538b3f40.chunk.js","mappings":"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","sources":["components/GameR/KeyR.js","components/GameR/KeyboardR.js","components/GameR/SpacebarR.js"],"sourcesContent":["import React, { useContext } from 'react'\nimport { KeyboardRContext } from './KeyboardR';\n\nfunction Key({ keyVal, red, style }) {\n  const { selectKey } = useContext(KeyboardRContext);\n  const chooseKey = () => {\n    selectKey(keyVal);\n    };\n\n  return (\n      <div className={red ? 'key red_key' : 'key blue_key'} style={style} onClick={chooseKey}>\n        {keyVal}\n      </div>\n    )\n}\n\nexport default Key","import React, { useCallback, useContext, useEffect, useState, createContext } from 'react';\nimport { AppContext } from '../../App';\nimport { useKeydownEffect } from '../../utils';\nimport Key from './KeyR';\nimport Spacebar from './SpacebarR';\n\nexport const KeyboardRContext = createContext();\n\nfunction KeyboardR() {\n    const { setGameChosen, keysColor, setKeysColor } = useContext(AppContext);\n    const [keys0, setKeys0] = useState([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]);\n    const [keys1, setKeys1] = useState([\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"]);\n    const [keys2, setKeys2] = useState([\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\"]);\n    const [keys3, setKeys3] = useState([\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\"]);\n    const allKeys = [keys0, keys1, keys2, keys3]\n\n    const [keys0Red, setKeys0Red] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    const [keys1Red, setKeys1Red] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    const [keys2Red, setKeys2Red] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    const [keys3Red, setKeys3Red] = useState([0, 0, 0, 0, 0, 0, 0]);\n\n    const digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n\n    const letters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \n                    \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \n                    \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n    \n    const [selectedKeys, setSelectedKeys] = useState([]);\n    const [response, setResponse] = useState(\"\")\n\n    const checkGameOver = () => {\n      const isOneExists = keys0Red.includes(0) || keys1Red.includes(0) || keys2Red.includes(0) || keys3Red.includes(0);\n      if (!isOneExists) {\n        setResponse(\"check\");\n        setTimeout(() => {\n          let newKeysColor = [...keysColor];\n          newKeysColor[1][3] = 1;\n          setKeysColor(newKeysColor);\n          setGameChosen({ gameChosen: false, gameNumber: '' });\n        }, 1000);\n      }\n      }\n\n    const seeRedNumbers = () => {\n      let updatedKeys0Red = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n      keys0.forEach((key, index) => {\n        const numberCode = digits.indexOf(key);\n        if (index === 0) {\n          const nextKey = keys0[index + 1];\n          const nextNumberCode = digits.indexOf(nextKey);\n\n          if (numberCode + nextNumberCode === 9) {\n            updatedKeys0Red[index] = 1;\n          }\n        } else if (index === keys0.length - 1) {\n          const prevKey = keys0[index - 1];\n          const prevNumberCode = digits.indexOf(prevKey);\n          \n          if (numberCode + prevNumberCode === 9) {\n            updatedKeys0Red[index] = 1;\n          }\n        } else if(index > 0 && index < keys0.length - 1) {\n          const prevKey = keys0[index - 1];\n          const nextKey = keys0[index + 1];\n          const prevNumberCode = digits.indexOf(prevKey);\n          const nextNumberCode = digits.indexOf(nextKey);\n          \n          if (numberCode + nextNumberCode === 9 || numberCode + prevNumberCode === 9) {\n            updatedKeys0Red[index] = 1;\n          }\n        }\n        \n      });\n      setKeys0Red(updatedKeys0Red)\n    }\n\n    const seeRedLetters = () => {\n      let updatedKeys1Red = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n      let updatedKeys2Red = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n      let updatedKeys3Red = [0, 0, 0, 0, 0, 0, 0]\n      keys1.forEach((key, index) => {\n        const numberCode = letters.indexOf(key);\n        if (index === 0) {\n          const nextKey = keys1[index + 1];\n          const nextLetterCode = letters.indexOf(nextKey);\n          const downRightKey = keys2[index];\n          const downRightLetterCode = letters.indexOf(downRightKey);\n\n          if (numberCode + nextLetterCode === 25 || numberCode + downRightLetterCode === 25) {\n            updatedKeys1Red[index] = 1;\n          }\n        } else if (index === keys1.length - 1) {\n          const prevKey = keys1[index - 1];\n          const prevLetterCode = letters.indexOf(prevKey);\n          const downLeftKey = keys2[index - 1];\n          const downLeftLetterCode = letters.indexOf(downLeftKey);\n          \n          if (numberCode + prevLetterCode === 25 || numberCode + downLeftLetterCode === 25) {\n            updatedKeys1Red[index] = 1;\n          }\n        } else if(index > 0 && index < keys1.length - 1) {\n          const prevKey = keys1[index - 1];\n          const nextKey = keys1[index + 1];\n          const prevLetterCode = letters.indexOf(prevKey);\n          const nextLetterCode = letters.indexOf(nextKey);\n          const downLeftKey = keys2[index - 1];\n          const downLeftLetterCode = letters.indexOf(downLeftKey);\n          const downRightKey = keys2[index];\n          const downRightLetterCode = letters.indexOf(downRightKey);\n          \n          if (numberCode + prevLetterCode === 25 || numberCode + nextLetterCode === 25\n           || numberCode + downLeftLetterCode === 25 || numberCode + downRightLetterCode === 25) {\n            updatedKeys1Red[index] = 1;\n          }\n        }\n      });\n      keys2.forEach((key, index) => {\n        const numberCode = letters.indexOf(key);\n        if (index === 0) {\n          const nextKey = keys2[index + 1];\n          const nextLetterCode = letters.indexOf(nextKey);\n          const upLeftKey = keys1[index];\n          const upLeftLetterCode = letters.indexOf(upLeftKey);\n          const upRightKey = keys1[index + 1];\n          const upRightLetterCode = letters.indexOf(upRightKey);\n\n          if (numberCode + nextLetterCode === 25 || numberCode + upLeftLetterCode === 25\n           || numberCode + upRightLetterCode === 25) {\n            updatedKeys2Red[index] = 1;\n          }\n        } else if (index === keys2.length - 1) {\n          const prevKey = keys2[index - 1];\n          const prevLetterCode = letters.indexOf(prevKey);\n          const upLeftKey = keys1[index];\n          const upLeftLetterCode = letters.indexOf(upLeftKey);\n          const upRightKey = keys1[index + 1];\n          const upRightLetterCode = letters.indexOf(upRightKey);\n          \n          if (numberCode + prevLetterCode === 25 || numberCode + upLeftLetterCode === 25\n          || numberCode + upRightLetterCode === 25) {\n            updatedKeys2Red[index] = 1;\n          }\n        } else if(index > 0 && index < keys2.length - 1) {\n          const prevKey = keys2[index - 1];\n          const nextKey = keys2[index + 1];\n          const prevLetterCode = letters.indexOf(prevKey);\n          const nextLetterCode = letters.indexOf(nextKey);\n          const downKey = keys3[index - 1];\n          const downLetterCode = letters.indexOf(downKey);\n          const upLeftKey = keys1[index];\n          const upLeftLetterCode = letters.indexOf(upLeftKey);\n          const upRightKey = keys1[index + 1];\n          const upRightLetterCode = letters.indexOf(upRightKey);\n          \n          if (numberCode + prevLetterCode === 25 || numberCode + nextLetterCode === 25\n           || numberCode + downLetterCode === 25 || numberCode + upLeftLetterCode === 25\n           || numberCode + upRightLetterCode === 25) {\n            updatedKeys2Red[index] = 1;\n          }\n        }\n      });\n      keys3.forEach((key, index) => {\n        const numberCode = letters.indexOf(key);\n        const upKey = keys2[index + 1];\n        const upLetterCode = letters.indexOf(upKey);\n        if (index === 0) {\n          const nextKey = keys3[index + 1];\n          const nextLetterCode = letters.indexOf(nextKey);\n\n          if (numberCode + nextLetterCode === 25 || numberCode + upLetterCode === 25) {\n            updatedKeys3Red[index] = 1;\n          }\n        } else if (index === keys3.length - 1) {\n          const prevKey = keys3[index - 1];\n          const prevLetterCode = letters.indexOf(prevKey);\n          \n          if (numberCode + prevLetterCode === 25 || numberCode + upLetterCode === 25) {\n            updatedKeys3Red[index] = 1;\n          }\n        } else if(index > 0 && index < keys3.length - 1) {\n          const prevKey = keys3[index - 1];\n          const nextKey = keys3[index + 1];\n          const prevLetterCode = letters.indexOf(prevKey);\n          const nextLetterCode = letters.indexOf(nextKey);\n          \n          if (numberCode + prevLetterCode === 25 || numberCode + nextLetterCode === 25\n           || numberCode + upLetterCode === 25) {\n            updatedKeys3Red[index] = 1;\n          }\n        }\n      });\n      setKeys1Red(updatedKeys1Red)\n      setKeys2Red(updatedKeys2Red)\n      setKeys3Red(updatedKeys3Red)\n    }\n\n    const selectKey = (key) => {\n      if (selectedKeys.length === 0) {\n        setSelectedKeys([key]);\n      } else if (selectedKeys.length === 1) {\n        const [firstKey] = selectedKeys;\n        \n        if (/^[0-9]$/.test(firstKey) && /^[0-9]$/.test(key)) {\n          // Swap keys within keys0 array\n          if (keys0.includes(firstKey) && keys0.includes(key)) {\n            const updatedKeys0 = keys0.map((k) => {\n              if (k === firstKey) return key;\n              if (k === key) return firstKey;\n              return k;\n            });\n            setKeys0(updatedKeys0);\n            setSelectedKeys([]);\n          }\n        } else if (/^[A-Za-z]$/.test(firstKey) && /^[A-Za-z]$/.test(key)) {\n          // Find arrays that contain both firstKey and key\n          const arrays = [keys1, keys2, keys3];\n          const arraysContainingKeys = arrays.filter((keys) => keys.includes(firstKey) || keys.includes(key));\n\n          // Swap values in the repetitive arrays\n          for (const keys of arraysContainingKeys) {\n            const updatedKeys = keys.map((k) => {\n              if (k === firstKey) return key;\n              if (k === key) return firstKey;\n              return k;\n            });\n\n            // Update the state with the swapped values\n            if (keys === keys1) {\n              setKeys1(updatedKeys);\n            } else if (keys === keys2) {\n              setKeys2(updatedKeys);\n            } else if (keys === keys3) {\n              setKeys3(updatedKeys);\n            }\n          }\n          setSelectedKeys([]);\n        } else {\n          setSelectedKeys([key])\n        }\n      }\n    };\n\n    useEffect(() => {\n      seeRedNumbers();\n      seeRedLetters();\n    }, [selectedKeys]);\n\n    useEffect(() => {\n      checkGameOver();\n    }, [keys0Red, keys1Red, keys2Red, keys3Red]);\n\n    const handleKeyboard = useCallback((event) => {\n        if(event.key === \"Backspace\") {\n\n        } else if (event.key === \" \") {\n            setGameChosen({gameChosen: false, gameNumber: ''});\n        } else {\n            for (const keys of allKeys) {\n                for (const key of keys) {\n                  if (event.key.toLowerCase() === key.toLowerCase()) {\n                    selectKey(key);\n                    break;\n                  }\n                }\n              }\n            }\n    }, [allKeys]);\n\n    useKeydownEffect(handleKeyboard, [handleKeyboard]);\n\n    return (\n        <div className=\"keyboard\" onKeyDown={handleKeyboard}>\n            <KeyboardRContext.Provider\n                value={{\n                selectKey}}>\n            <div className='line0'>{keys0.map((key, index) => {\n                const uniqueKey = `0-${index}`;\n                return <Key keyVal={key}\n                  key={uniqueKey}\n                  red={keys0Red[index] === 0}\n                  style={selectedKeys[0] === key ? { color: 'yellow' } : {}} />;\n            })}</div>\n            <div className='line1'>\n                {keys1.map((key, index) => {\n                const uniqueKey = `1-${index}`;\n                return <Key keyVal={key}\n                  key={uniqueKey}\n                  red={keys1Red[index] === 0}\n                  style={selectedKeys[0] === key ? { color: 'yellow' } : {}} />;\n            })}</div>\n            <div className='line2'>\n              {keys2.map((key, index) => {\n              const uniqueKey = `2-${index}`;\n              return <Key keyVal={key} \n              key={uniqueKey}\n              red={keys2Red[index] === 0}\n              style={selectedKeys[0] === key ? { color: 'yellow' } : {}} />;})}\n            </div>\n            <div className='line3'>{keys3.map((key, index) => {\n              const uniqueKey = `3-${index}`;\n                return <Key keyVal={key}\n                  key={uniqueKey}\n                  red={keys3Red[index] === 0}\n                  style={selectedKeys[0] === key ? { color: 'yellow' } : {}} />;\n                })}\n            </div>\n            <div className='line4'>< Spacebar keyVal={response} /></div>\n            </KeyboardRContext.Provider>\n        </div>\n    )\n\n}\n\nexport default KeyboardR","import React, { useContext } from 'react'\nimport { AppContext } from '../../App';\nimport { FaCheck, FaTimes } from '../IconModule';\n\nfunction Spacebar({ keyVal }) {\n  const { setGameChosen } = useContext(AppContext);\n  const selectLetter = () => {\n    setGameChosen({gameChosen: false, gameNumber: ''});\n    };\n\n  let iconComponent = null;\n  let iconColorClass = '';\n\n  if (keyVal === 'check') {\n    iconComponent = <FaCheck />;\n    iconColorClass = 'check-color';\n  } else if (keyVal === 'times') {\n    iconComponent = <FaTimes />;\n    iconColorClass = 'times-color';\n  }\n  \n\n  return (\n      <div className={`key spacebar ${iconColorClass}`} onClick={selectLetter}>\n        {iconComponent}\n      </div>\n    )\n}\n\nexport default Spacebar"],"names":["_ref","keyVal","red","style","selectKey","useContext","KeyboardRContext","_jsx","className","onClick","children","createContext","_useContext","AppContext","setGameChosen","keysColor","setKeysColor","_useState","useState","_useState2","_slicedToArray","keys0","setKeys0","_useState3","_useState4","keys1","setKeys1","_useState5","_useState6","keys2","setKeys2","_useState7","_useState8","keys3","setKeys3","allKeys","_useState9","_useState10","keys0Red","setKeys0Red","_useState11","_useState12","keys1Red","setKeys1Red","_useState13","_useState14","keys2Red","setKeys2Red","_useState15","_useState16","keys3Red","setKeys3Red","digits","letters","_useState17","_useState18","selectedKeys","setSelectedKeys","_useState19","_useState20","response","setResponse","key","length","firstKey","test","includes","updatedKeys0","map","k","_step","arraysContainingKeys","filter","keys","_iterator","_createForOfIteratorHelper","s","n","done","value","updatedKeys","err","e","f","useEffect","updatedKeys0Red","forEach","index","numberCode","indexOf","nextKey","prevKey","prevNumberCode","seeRedNumbers","updatedKeys1Red","updatedKeys2Red","updatedKeys3Red","nextLetterCode","downRightKey","downRightLetterCode","prevLetterCode","downLeftKey","downLeftLetterCode","upLeftKey","upLeftLetterCode","upRightKey","upRightLetterCode","downKey","downLetterCode","upKey","upLetterCode","seeRedLetters","setTimeout","newKeysColor","_toConsumableArray","gameChosen","gameNumber","handleKeyboard","useCallback","event","_i","_allKeys","_step2","_iterator2","toLowerCase","useKeydownEffect","onKeyDown","_jsxs","Provider","uniqueKey","concat","Key","color","Spacebar","iconComponent","iconColorClass","FaCheck","FaTimes"],"sourceRoot":""}
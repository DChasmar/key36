{"version":3,"file":"static/js/4593.155ace5d.chunk.js","mappings":"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","sources":["components/Game9/Key9.js","components/Game9/Keyboard9.js","components/Game9/Spacebar9.js"],"sourcesContent":["import React, { useContext } from 'react'\nimport { Keyboard9Context } from './Keyboard9';\nimport { GoDotFill } from '../IconModule';\n\nfunction Key({ keyVal, keyLine }) {\n  const { addLetter, removeLetter, disableKeyPressRef } = useContext(Keyboard9Context);\n  const selectLetter = () => {\n    if (disableKeyPressRef.current) {\n      return;\n    } else if (keyLine === 1 || keyLine === 2 || keyLine === 3) {\n        addLetter(keyVal);\n    } else if (keyLine === 0) {\n        removeLetter()\n    };\n  };\n\n  let iconComponent = null;\n\n  if (keyLine === 0 && keyVal === \"\") {\n    iconComponent = <GoDotFill />;\n  } else {\n    iconComponent = keyVal;\n  }\n\n  return (\n      <div className={keyLine===0 ? 'key guess_key' : 'key'} onClick={selectLetter}>\n        {iconComponent}\n      </div>\n    )\n}\n\nexport default Key","import React, { useCallback, useContext, useEffect, useState, createContext, useRef } from 'react';\nimport { AppContext } from '../../App';\nimport { useKeydownEffect } from '../../utils';\nimport Key from './Key9';\nimport Spacebar from './Spacebar9';\n\nexport const Keyboard9Context = createContext();\n\nfunction Keyboard9() {\n    const { setGameChosen, keysColor, setKeysColor } = useContext(AppContext);\n    const [keys0, setKeys0] = useState([\"\"]);\n    const [keys1, setKeys1] = useState([\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"]);\n    const [keys2, setKeys2] = useState([\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\"]);\n    const [keys3, setKeys3] = useState([\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\"]);\n\n    const fauxKeys0 = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]\n    const allKeys = [keys1, keys2, keys3]\n\n    const [wordList, setWordList] = useState([])\n\n    const [correctWords, setCorrectWords] = useState([\n        ['A', 'I'], \n        [ \"AHA\", \"BIB\", \"BOB\", \"BUB\", \"DAD\", \"DID\", \"DUD\", \"EKE\", \"ERE\", \"EVE\",\n        \"EWE\", \"EYE\", \"GAG\", \"GIG\", \"HAH\", \"HUH\", \"MAM\", \"MOM\", \"MUM\", \"NAN\",\n        \"NUN\", \"PAP\", \"PEP\", \"PIP\", \"POP\", \"PUP\", \"SIS\", \"TAT\", \"TIT\", \"TOT\", \"TUT\", \"WOW\"],\n        [\"BOOB\", \"DEED\", \"KOOK\", \"NAAN\", \"NOON\", \"PEEP\", \"POOP\", \"SEES\", \"TOOT\"],\n        [\"CIVIC\", \"KAYAK\", \"LEVEL\", \"MADAM\", \"MINIM\", \"RADAR\", \"REFER\", \"ROTOR\",\n        \"SAGAS\", \"SEXES\", \"SOLOS\", \"STATS\", \"TENET\"],\n        [\"REDDER\", \"DENNED\", \"PULLUP\", \"SUCCUS\"],\n        [\"DEIFIED\", \"RACECAR\", \"ROTATOR\", \"REPAPER\", \"REVIVER\"]\n    ]);\n\n\n    const [symbolResponse, setSymbolResponse] = useState(\"\")\n\n    const disableKeyPressRef = useRef(false);\n\n    const gameOver = () => {\n        let newKeysColor = [...keysColor];\n        newKeysColor[0][8] = 1;\n        setKeysColor(newKeysColor);\n        setGameChosen({ gameChosen: false, gameNumber: '' });\n    }\n\n    const goodWord = () => {\n        setSymbolResponse(\"check\");\n        disableKeyPressRef.current = true;\n        let newWordList = [...wordList];\n        newWordList.push(keys0.join(''));\n        setWordList(newWordList);\n        setTimeout(() => {\n            if (keys0.length < 7){\n                let length = keys0.length;\n                if (length === 1) {\n                    length = 2;\n                }\n                let updatedKeys0 = keys0\n                for (let i = 0; i < length; i++) {\n                updatedKeys0[i] = \"\";\n                }\n                updatedKeys0.push(\"\");\n                setKeys0(updatedKeys0);\n            } else {\n                gameOver()\n            }\n            setSymbolResponse(\"\");\n            disableKeyPressRef.current = false;\n        }, 1000);\n    }\n\n    const badWord = () => {\n        setSymbolResponse(\"times\");\n        disableKeyPressRef.current = true;\n        setTimeout(() => {\n            let length = keys0.length;\n            let updatedKeys0 = keys0\n            for (let i = 0; i < length; i++) {\n            updatedKeys0[i] = \"\";\n            }\n            setKeys0(updatedKeys0);\n            setSymbolResponse(\"\");\n            if (keys0.length !== 1) {\n                setKeys1([\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"])\n                setKeys2([\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\"])\n                setKeys3([\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\"])\n            }\n            disableKeyPressRef.current = false;\n        }, 1000);\n    }\n    \n    const addLetter = (key) => {\n        let updatedKeys = [...keys0];\n        const emptyIndex = updatedKeys.findIndex((val) => val === '');\n        if (emptyIndex >= 0) {\n            updatedKeys[emptyIndex] = key.toUpperCase(); \n            updatedKeys[updatedKeys.length - (emptyIndex + 1)] = key.toUpperCase();        \n        }\n        setKeys0(updatedKeys);\n    }\n\n    const removeLetter = () => {\n        let updatedKeys = [...keys0];\n        const emptyIndex = updatedKeys.findIndex((val) => val === '');\n        if (emptyIndex > 0 && emptyIndex < 10) {\n            updatedKeys[emptyIndex - 1] = '';\n            updatedKeys[updatedKeys.length - emptyIndex] = ''; \n        }\n        setKeys0(updatedKeys);\n    }\n\n    const checkWord = () => {\n        if (keys0.includes(\"\")) return;\n        if (keys0.length === 1) {\n            if (keys0[0] === \"A\" || keys0[0] === \"I\") {\n                goodWord()\n            } else {\n                badWord()\n            }\n        } else {\n            const wordGuess = keys0.join('');\n            if (correctWords[keys0.length - 2].includes(wordGuess)) {\n                goodWord()\n            } else {\n                badWord()\n            }\n        }\n    }\n\n    useEffect(() => {\n        checkWord()\n    }, [keys0]);\n\n    const handleKeyboard = useCallback((event) => {\n\n        if (disableKeyPressRef.current) {\n            event.preventDefault();\n            return;\n        } else if (event.key === \"Backspace\") {\n            removeLetter()\n        } else if (event.key === \" \") {\n            setGameChosen({gameChosen: false, gameNumber: ''});\n        } else {\n            fauxKeys0.forEach((key) => {\n                if (event.key.toUpperCase() === key.toUpperCase()) {\n                    removeLetter()\n                }            \n            });\n            for (const keys of allKeys) {\n              for (const key of keys) {\n                if (event.key.toLowerCase() === key.toLowerCase()) {\n                  addLetter(key);\n                  break;\n                }\n              }\n            }\n          }\n      }, [fauxKeys0, allKeys]);\n\n\n    useKeydownEffect(handleKeyboard, [handleKeyboard]);\n\n    return (\n        <div className=\"keyboard\" onKeyDown={handleKeyboard}>\n            <Keyboard9Context.Provider\n                value={{\n                addLetter,\n                removeLetter,\n                disableKeyPressRef\n                }}>\n            <div className='line0'>{keys0.map((key, index) => {\n                const uniqueKey = `0-${index}`;\n                return <Key keyVal={key} key={uniqueKey} keyLine={0} guessKey />;\n            })}</div>\n            <div className='line1'>{keys1.map((key, index) => {\n                const uniqueKey = `1-${index}`;\n                return <Key keyVal={key} key={uniqueKey} keyLine={1} />;\n            })}</div>\n            <div className='line2'>\n                {keys2.map((key, index) => {\n                const uniqueKey = `2-${index}`;\n                return <Key keyVal={key} key={uniqueKey} keyLine={2} />;\n            })}</div>\n            <div className='line3'>{keys3.map((key, index) => {\n                const uniqueKey = `3-${index}`;\n                return <Key keyVal={key} key={uniqueKey} keyLine={3} />;\n            })}</div>\n            <div className='line4'>< Spacebar keyVal={symbolResponse} /></div>\n            <div className='word_box'>\n                {wordList.map((word, index) => (\n                    <p key={index} className=\"word_box_word\" >{word}</p>\n            ))}</div>\n            </Keyboard9Context.Provider>\n        </div>\n    )\n\n}\n\nexport default Keyboard9","import React, { useContext } from 'react'\nimport { AppContext } from '../../App';\nimport { FaCheck, FaTimes } from '../IconModule';\n\nfunction Spacebar({ keyVal }) {\n  const { setGameChosen } = useContext(AppContext);\n  const selectLetter = () => {\n    setGameChosen({gameChosen: false, gameNumber: ''});\n    };\n\n  let iconComponent = null;\n  let iconColorClass = '';\n\n  if (keyVal === 'check') {\n    iconComponent = <FaCheck />;\n    iconColorClass = 'check-color';\n  } else if (keyVal === 'times') {\n    iconComponent = <FaTimes />;\n    iconColorClass = 'times-color';\n  }\n  \n\n  return (\n      <div className={`key spacebar ${iconColorClass}`} onClick={selectLetter}>\n        {iconComponent}\n      </div>\n    )\n}\n\nexport default Spacebar"],"names":["_ref","keyVal","keyLine","_useContext","useContext","Keyboard9Context","addLetter","removeLetter","disableKeyPressRef","iconComponent","_jsx","GoDotFill","className","onClick","current","children","createContext","AppContext","setGameChosen","keysColor","setKeysColor","_useState","useState","_useState2","_slicedToArray","keys0","setKeys0","_useState3","_useState4","keys1","setKeys1","_useState5","_useState6","keys2","setKeys2","_useState7","_useState8","keys3","setKeys3","fauxKeys0","allKeys","_useState9","_useState10","wordList","setWordList","_useState11","_useState12","correctWords","_useState13","_useState14","symbolResponse","setSymbolResponse","useRef","goodWord","newWordList","_toConsumableArray","push","join","setTimeout","length","updatedKeys0","i","newKeysColor","gameChosen","gameNumber","gameOver","badWord","key","updatedKeys","emptyIndex","findIndex","val","toUpperCase","useEffect","includes","wordGuess","checkWord","handleKeyboard","useCallback","event","preventDefault","forEach","_i","_allKeys","_step","keys","_iterator","_createForOfIteratorHelper","s","n","done","value","toLowerCase","err","e","f","useKeydownEffect","onKeyDown","_jsxs","Provider","map","index","uniqueKey","concat","Key","guessKey","Spacebar","word","iconColorClass","FaCheck","FaTimes"],"sourceRoot":""}
{"version":3,"file":"static/js/5863.5da9786e.chunk.js","mappings":"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","sources":["components/GameN/DordleBoxN.js","components/GameN/DordleGuessesN.js","components/GameN/KeyN.js","components/GameN/KeyboardN.js","components/GameN/SpacebarN.js"],"sourcesContent":["import React from 'react'\n\nfunction DordleBox( { keyVal, color } ) {\n\n  let boxColor;\n\n  if (color === 0) {\n    boxColor = '#cccccc'; // grey\n  } else if (color === 1) {\n    boxColor = '#d9d91e'; // yellow\n  } else if (color === 2) {\n    boxColor = '#67ae4d'; // green\n  } else {\n    boxColor = 'white';\n  }\n\n  return (\n    <div className='key mini_key' style={{ backgroundColor: boxColor }}>\n        {keyVal}\n    </div>\n  )\n}\n\nexport default DordleBox","import React, { useContext } from 'react'\nimport DordleBox from './DordleBoxN';\nimport { KeyboardNContext } from './KeyboardN';\n\nfunction DordleGuesses() {\n    const { guesses, guessColors } = useContext(KeyboardNContext);\n    \n    const nineGuesses1 = [...guesses[0], ...guesses[3]];\n    const nineGuesses2 = [...guesses[1], ...guesses[4]];\n    const nineGuesses3 = [...guesses[2], ...guesses[5]];\n\n    const nineGuessColors1 = [...guessColors[0], ...guessColors[3]];\n    const nineGuessColors2 = [...guessColors[1], ...guessColors[4]];\n    const nineGuessColors3 = [...guessColors[2], ...guessColors[5]];\n\n    return (\n      <div className='dordle_box'>\n        <div className='mini_line1'>\n          {nineGuesses1.map((key, index) => {\n          const uniqueKey = `mini_line1-${index}`;\n          return (\n            <React.Fragment key={uniqueKey}>\n              <DordleBox keyVal={key} color={nineGuessColors1[index]} />\n              {index === 4 && <div className='divider mini_divider'>|</div>}\n            </React.Fragment>\n          );\n        })}</div>\n        <div className='mini_line2'>\n          {nineGuesses2.map((key, index) => {\n          const uniqueKey = `mini_line2-${index}`;\n          return (\n            <React.Fragment key={uniqueKey}>\n              <DordleBox keyVal={key} color={nineGuessColors2[index]} />\n              {index === 4 && <div className='divider mini_divider'>|</div>}\n            </React.Fragment>\n          );\n        })}</div>\n        <div className='mini_line3'>\n          {nineGuesses3.map((key, index) => {\n          const uniqueKey = `mini_line3-${index}`;\n          return (\n            <React.Fragment key={uniqueKey}>\n              <DordleBox keyVal={key} color={nineGuessColors3[index]} />\n              {index === 4 && <div className='divider mini_divider'>|</div>}\n            </React.Fragment>\n          );\n        })}</div>\n      </div>\n    )\n}\n\nexport default DordleGuesses","import React, { useContext } from 'react'\nimport { KeyboardNContext } from './KeyboardN';\n\nfunction Key({ keyVal, dark, color, keyLine }) {\n  const { addLetter, removeLetter, disableKeyPressRef } = useContext(KeyboardNContext);\n  const chooseKey = () => {\n    if (disableKeyPressRef.current) {\n      return;\n    } else if (keyLine === 1 || keyLine === 2 || keyLine === 3) {\n        addLetter(keyVal);\n    } else if (keyLine === 0) {\n        removeLetter()\n    };\n  };\n\n  let boxColor;\n\n  if (color === 0) {\n    boxColor = '#cccccc'; // grey\n  } else if (color === 1) {\n    boxColor = '#d9d91e'; // yellow\n  } else if (color === 2) {\n    boxColor = '#67ae4d'; // green\n  } else {\n    boxColor = 'white';\n  }\n\n  return (\n      <div className={dark ? 'key dark_key reveal-tile' : 'key'} style={{ backgroundColor: boxColor }} onClick={chooseKey}>\n        {keyVal}\n      </div>\n    )\n}\n\nexport default Key","import React, { useCallback, useContext, useEffect, useState, createContext, useRef } from 'react';\nimport { AppContext } from '../../App';\nimport { useKeydownEffect, updateDordleColors } from '../../utils';\nimport Key from './KeyN';\nimport Spacebar from './SpacebarN';\nimport compoundWordBank from './CompoundWordList.json';\nimport fourLetterWordBank from '../FourLetterWords.json';\nimport fiveLetterWordBank from '../FiveLetterWords.json';\nimport nineLetterWordBank from '../NineLetterWords.json';\nimport DordleGuesses from './DordleGuessesN';\n\nexport const KeyboardNContext = createContext();\n\nfunction KeyboardN() {\n    const { setGameChosen, keysColor, setKeysColor } = useContext(AppContext);\n    const [keys0, setKeys0] = useState([\"\", \"\", \"\", \"\", \"\"]);\n    const keys1 = [\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"];\n    const keys2 = [\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\"];\n    const keys3 = [\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\"];\n    const allKeys = [keys1, keys2, keys3];\n\n    const [keys0DordleColors, setKeys0DordleColors] = useState([-1, -1, -1, -1, -1]);\n    const [keys1DordleColors, setKeys1DordleColors] = useState([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]);\n    const [keys2DordleColors, setKeys2DordleColors] = useState([-1, -1, -1, -1, -1, -1, -1, -1, -1]);\n    const [keys3DordleColors, setKeys3DordleColors] = useState([-1, -1, -1, -1, -1, -1, -1]);\n\n    const [greenKeys, setGreenKeys] = useState([]);\n    const [yellowKeys, setYellowKeys] = useState([]);\n    const [greyKeys, setGreyKeys] = useState([]);\n\n    const[storedColorKeys, setStoredColorKeys] = useState([]);\n    const[finalColorKeys, setFinalColorKeys] = useState([]);\n\n    const [guesses, setGuesses] = useState([\n        [\"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\"],\n        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n    ]);\n    \n    const [guessColors, setGuessColors] = useState([\n        [-1, -1, -1, -1, -1], \n        [-1, -1, -1, -1, -1],\n        [-1, -1, -1, -1, -1],\n        [-1, -1, -1, -1], \n        [-1, -1, -1, -1],\n        [-1, -1, -1, -1],\n        [-1, -1, -1, -1, -1, -1, -1, -1, -1]\n    ]);\n\n    const [turnCounter, setTurnCounter] = useState(0);\n\n    const fauxKeys0 = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"];\n\n    const [compoundWordSet, setCompoundWordSet] = useState(new Set());\n    const [fourLetterWordSet, setFourLetterWordSet] = useState(new Set());\n    const [fiveLetterWordSet, setFiveLetterWordSet] = useState(new Set());\n    const [nineLetterWordSet, setNineLetterWordSet] = useState(new Set());\n    const [correctWord, setCorrectWord] = useState(\"\");\n    const [wordReveal, setWordReveal] = useState(\"\");\n\n    const [symbolResponse, setSymbolResponse] = useState(\"\");\n\n    const disableKeyPressRef = useRef(false);\n\n    const generateCompoundWordSet = async () => {\n        const compoundWordSet = new Set(compoundWordBank.words);\n        const randomCompoundWord = [...compoundWordSet][Math.floor(Math.random() * compoundWordSet.size)];\n        return { compoundWordSet, randomCompoundWord };\n    };\n      \n    const generateFourLetterWordSet = async () => {\n        const fourLetterWordSet = new Set(fourLetterWordBank.words);\n        return { fourLetterWordSet };\n    };\n\n    const generateFiveLetterWordSet = async () => {\n        const fiveLetterWordSet = new Set(fiveLetterWordBank.words);\n        return { fiveLetterWordSet };\n    };\n      \n    const generateNineLetterWordSet = async () => {\n        const nineLetterWordSet = new Set(nineLetterWordBank.words);\n        return { nineLetterWordSet };\n    };\n      \n    useEffect(() => {\n        const fetchData = async () => {\n          const compoundWords = await generateCompoundWordSet();\n          const fourLetterWords = await generateFourLetterWordSet();\n          const fiveLetterWords = await generateFiveLetterWordSet();\n          const nineLetterWords = await generateNineLetterWordSet();\n      \n          setCompoundWordSet(compoundWords.compoundWordSet);\n          setCorrectWord(compoundWords.randomCompoundWord);\n          setFourLetterWordSet(fourLetterWords.fourLetterWordSet);\n          setFiveLetterWordSet(fiveLetterWords.fiveLetterWordSet);\n          setNineLetterWordSet(nineLetterWords.nineLetterWordSet);\n        };\n      \n        fetchData();\n    }, []);\n\n    const addLetter = (key) => {\n        let updatedKeys = [...keys0];\n        const emptyIndex = updatedKeys.findIndex((val) => val === '');\n        if (emptyIndex >= 0) {\n            updatedKeys[emptyIndex] = key.toUpperCase();\n        }\n        setKeys0(updatedKeys);\n    };\n\n    const removeLetter = () => {\n        let updatedKeys = [...keys0];\n        const emptyIndex = updatedKeys.findIndex((val) => val === '');\n        if (emptyIndex > 0) {\n            updatedKeys[emptyIndex - 1] = '';\n        }\n        setKeys0(updatedKeys);\n    };\n\n    const findKeyboardColors = (colorKeys, value) => {\n        updateDordleColors(colorKeys, value, keys1, setKeys1DordleColors);\n        updateDordleColors(colorKeys, value, keys2, setKeys2DordleColors);\n        updateDordleColors(colorKeys, value, keys3, setKeys3DordleColors);\n    };\n\n    useEffect(() => {\n        findKeyboardColors(greyKeys, 0)\n        findKeyboardColors(yellowKeys, 1)\n        findKeyboardColors(greenKeys, 2)\n    }, [greenKeys, yellowKeys, greyKeys]);\n\n    useEffect(() => {\n        if (finalColorKeys.green && finalColorKeys.yellow && finalColorKeys.grey) {\n            setKeys1DordleColors([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]);\n            setKeys2DordleColors([-1, -1, -1, -1, -1, -1, -1, -1, -1]);\n            setKeys3DordleColors([-1, -1, -1, -1, -1, -1, -1]);\n            setGreenKeys(finalColorKeys.green);\n            setYellowKeys(finalColorKeys.yellow);\n            setGreyKeys(finalColorKeys.grey);\n        }\n    }, [finalColorKeys.green, finalColorKeys.yellow, finalColorKeys.grey]);\n\n    const findFinalColorKeys = (green, yellow, grey) => {\n        const uniqueGreenKeys = new Set([...green, ...storedColorKeys.green]);\n        const uniqueYellowKeys = new Set([...yellow, ...storedColorKeys.yellow]);\n        const uniqueGreyKeys = new Set(grey.filter(key => storedColorKeys.grey.includes(key)));\n\n        const finalGreenKeys = Array.from(uniqueGreenKeys);\n        const finalYellowKeys = Array.from(uniqueYellowKeys).filter(key => !uniqueGreenKeys.has(key));\n        const finalGreyKeys = Array.from(uniqueGreyKeys).filter(key => !uniqueGreenKeys.has(key) && !uniqueYellowKeys.has(key));\n\n        setFinalColorKeys({\n            green: finalGreenKeys,\n            yellow: finalYellowKeys,\n            grey: finalGreyKeys,\n        });\n    }\n\n    const registerAndReset = (updatedGuessColors) => {\n        if (turnCounter < 6) {\n            // Reveal keys for word guess\n            setKeys0DordleColors(updatedGuessColors);\n            // Record guess colors in bottom table\n            setGuessColors((prevGuessColors) => {\n                const newGuessColors = [...prevGuessColors];\n                newGuessColors[turnCounter] = updatedGuessColors;\n                return newGuessColors;\n            });\n            // Record guess letters in bottom table\n            setGuesses((prevGuesses) => {\n                const newGuesses = [...prevGuesses];\n                newGuesses[turnCounter] = [...keys0];\n                return newGuesses;\n            });\n            // Reset guess keys to blank and white\n            setTimeout(() => {\n                if (turnCounter < 2) {\n                    setKeys0DordleColors([-1, -1, -1, -1, -1]);\n                    setKeys0([\"\", \"\", \"\", \"\", \"\"]);\n                } else if (turnCounter > 1 && turnCounter < 5) {\n                    setKeys0DordleColors([-1, -1, -1, -1]);\n                    setKeys0([\"\", \"\", \"\", \"\"]);\n                    if (turnCounter === 2) {\n                        setGreenKeys([]);\n                        setYellowKeys([]);\n                        setGreyKeys([]);\n                        setKeys1DordleColors([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]);\n                        setKeys2DordleColors([-1, -1, -1, -1, -1, -1, -1, -1, -1]);\n                        setKeys3DordleColors([-1, -1, -1, -1, -1, -1, -1]);\n                    }\n                } else {\n                    setKeys0DordleColors([-1, -1, -1, -1, -1, -1, -1, -1, -1]);\n                    setKeys0([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n                }\n                setTurnCounter((prevTurnCounter) => prevTurnCounter + 1);\n                disableKeyPressRef.current = false;\n            }, 1000);\n        // Logic for final guess\n        } else if (turnCounter === 6) {\n            setKeys0DordleColors(updatedGuessColors);\n            const hasNonGreenColors = updatedGuessColors.some(color => color !== 2);\n            // Incorrect, so reset with new word\n            if (hasNonGreenColors) {\n                setSymbolResponse(\"times\");\n                setWordReveal(correctWord);\n                setTimeout(() => {\n                    const compoundWordArray = Array.from(compoundWordSet);\n                    const newCompoundWordSet = compoundWordArray.filter(word => word !== correctWord);\n                    const randomCompoundWord = newCompoundWordSet[Math.floor(Math.random() * newCompoundWordSet.length)];\n                    setCorrectWord(randomCompoundWord);\n                    setKeys0DordleColors([-1, -1, -1, -1, -1]);\n                    setGuesses([\n                        [\"\", \"\", \"\", \"\", \"\"],\n                        [\"\", \"\", \"\", \"\", \"\"],\n                        [\"\", \"\", \"\", \"\", \"\"],\n                        [\"\", \"\", \"\", \"\"],\n                        [\"\", \"\", \"\", \"\"],\n                        [\"\", \"\", \"\", \"\"],\n                        [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n                    ]);           \n                    setGuessColors([\n                        [-1, -1, -1, -1, -1], \n                        [-1, -1, -1, -1, -1],\n                        [-1, -1, -1, -1, -1],\n                        [-1, -1, -1, -1], \n                        [-1, -1, -1, -1],\n                        [-1, -1, -1, -1],\n                        [-1, -1, -1, -1, -1, -1, -1, -1, -1]\n                    ]);\n                    setKeys0DordleColors([-1, -1, -1, -1, -1]);\n                    setKeys1DordleColors([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]);\n                    setKeys2DordleColors([-1, -1, -1, -1, -1, -1, -1, -1, -1]);\n                    setKeys3DordleColors([-1, -1, -1, -1, -1, -1, -1]);\n                    setGreenKeys([]);\n                    setYellowKeys([]);\n                    setGreyKeys([]);\n                    setKeys0([\"\", \"\", \"\", \"\", \"\"]);\n                    setTurnCounter(0);\n                    setSymbolResponse(\"\");\n                    setWordReveal(\"\");\n                    setStoredColorKeys([]);\n                    disableKeyPressRef.current = false;\n                }, 2000);\n                // Correct, so level complete, return home\n                } else {\n                setSymbolResponse(\"check\");\n                setTimeout(() => {\n                    let newKeysColor = [...keysColor];\n                    newKeysColor[3][5] = 1;\n                    setKeysColor(newKeysColor);\n                    setGameChosen({ gameChosen: false, gameNumber: '' });\n                    setSymbolResponse(\"\");\n                    disableKeyPressRef.current = false;\n                }, 2000); \n            }\n        }\n    }\n\n    const findGrey = (wordGuess, updatedGuessColors, uniqueGreenKeys, uniqueYellowKeys) => {\n        if (turnCounter < 6) {\n            let newGreyKeys = [...greyKeys]\n            for (let i = 0; i < wordGuess.length; i++) {\n                if (wordGuess[i] !== \"_\") {\n                    newGreyKeys.push(wordGuess[i])\n                    updatedGuessColors[i] = 0;\n                }\n            }\n            let uniqueGreyKeys = [...new Set(newGreyKeys)];\n            // Remove values from uniqueGreyKeys if they are also present in greenKeys or yellowKeys\n            uniqueGreyKeys = uniqueGreyKeys.filter(key => !uniqueGreenKeys.includes(key) && !uniqueYellowKeys.includes(key));\n            setGreyKeys(uniqueGreyKeys)\n            if (turnCounter === 2) {\n                setStoredColorKeys({\n                    green: uniqueGreenKeys,\n                    yellow: uniqueYellowKeys,\n                    grey: uniqueGreyKeys,\n                });\n            }\n            if (turnCounter === 5) {\n                findFinalColorKeys(uniqueGreenKeys, uniqueYellowKeys, uniqueGreyKeys);\n            }\n            registerAndReset(updatedGuessColors) \n        } else if (turnCounter === 6) {\n            let newGreyKeys = [...greyKeys]\n            for (let i = 0; i < wordGuess.length; i++) {\n            if (wordGuess[i] !== \"_\") {\n                newGreyKeys.push(wordGuess[i])\n                updatedGuessColors[i] = 0;\n            }\n            }\n            let uniqueGreyKeys = [...new Set(newGreyKeys)];\n            // Remove values from uniqueGreyKeys if they are also present in greenKeys or yellowKeys\n            uniqueGreyKeys = uniqueGreyKeys.filter(key => !uniqueGreenKeys.includes(key) && !uniqueYellowKeys.includes(key));\n            setGreyKeys(uniqueGreyKeys);\n            registerAndReset(updatedGuessColors);\n        }\n    }\n\n    const findYellow = (wordGuess, compound, updatedGuessColors, uniqueGreenKeys) => {\n        if (turnCounter < 6) {\n            let newCompound = compound.join(\"\")\n            let newYellowKeys = [...yellowKeys];\n            for (let i = 0; i < wordGuess.length; i++) {\n                if (newCompound.includes(wordGuess[i]) && wordGuess[i] !== \"_\") {\n                    newYellowKeys.push(wordGuess[i])\n                    updatedGuessColors[i] = 1;\n                    newCompound = newCompound.replace(wordGuess[i], \"_\");\n                    wordGuess[i] = \"_\";\n                }\n            }\n            let uniqueYellowKeys = [...new Set(newYellowKeys)];\n            // Remove values from uniqueYellowKeys if they are also present in greenKeys\n            uniqueYellowKeys = uniqueYellowKeys.filter(key => !uniqueGreenKeys.includes(key));\n            setYellowKeys(uniqueYellowKeys)\n            findGrey(wordGuess, updatedGuessColors, uniqueGreenKeys, uniqueYellowKeys)\n        } else if (turnCounter === 6) {\n            let newCorrectWord = compound.join(\"\");\n            let newYellowKeys = [...yellowKeys];\n            for (let i = 0; i < wordGuess.length; i++) {\n                if (newCorrectWord.includes(wordGuess[i]) && wordGuess[i] !== \"_\") {\n                    newYellowKeys.push(wordGuess[i])\n                    updatedGuessColors[i] = 1;\n                    newCorrectWord = newCorrectWord.replace(wordGuess[i], \"_\");\n                    wordGuess[i] = \"_\";\n                }\n            }\n            let uniqueYellowKeys = [...new Set(newYellowKeys)];\n            // Remove values from uniqueYellowKeys if they are also present in greenKeys\n            uniqueYellowKeys = uniqueYellowKeys.filter(key => !uniqueGreenKeys.includes(key));\n            setYellowKeys(uniqueYellowKeys)\n            findGrey(wordGuess, updatedGuessColors, uniqueGreenKeys, uniqueYellowKeys)\n        }\n    }\n\n    const findGreen = (wordGuess) => {\n        disableKeyPressRef.current = true;\n        let newWordGuess = [...wordGuess];\n        if (turnCounter < 6) {\n            let compound;\n            if (turnCounter < 3) {\n                compound = [...correctWord.slice(0,5)];\n            } else {\n                compound = [...correctWord.slice(5,9)];\n            }\n            let updatedGuessColors = [...keys0DordleColors];\n            let newGreenKeys = [...greenKeys];\n            for (let i = 0; i < wordGuess.length; i++) {\n                if (newWordGuess[i] === compound[i]) {\n                    newGreenKeys.push(newWordGuess[i])\n                    newWordGuess[i] = \"_\";\n                    compound[i] = \"_\";\n                    updatedGuessColors[i] = 2;\n                }\n            }\n            let uniqueGreenKeys = [...new Set(newGreenKeys)];\n            setGreenKeys(uniqueGreenKeys)\n            findYellow(newWordGuess, compound, updatedGuessColors, uniqueGreenKeys)\n        } else if (turnCounter === 6) {\n            let newCorrectWord = [...correctWord];\n            let updatedGuessColors = [...keys0DordleColors];\n            let newGreenKeys = [...greenKeys];\n            for (let i = 0; i < wordGuess.length; i++) {\n                if (newWordGuess[i] === newCorrectWord[i]) {\n                    newGreenKeys.push(newWordGuess[i])\n                    newWordGuess[i] = \"_\";\n                    newCorrectWord[i] = \"_\";\n                    updatedGuessColors[i] = 2;\n                }\n            }\n            let uniqueGreenKeys = [...new Set(newGreenKeys)];\n            setGreenKeys(uniqueGreenKeys)\n            findYellow(newWordGuess, newCorrectWord, updatedGuessColors, uniqueGreenKeys)\n        }\n    }\n\n    const checkWord = () => {\n        if (keys0.includes(\"\")) return;\n        if (turnCounter < 6) {\n            const wordGuess = keys0.join('');\n            if (fiveLetterWordSet.has(wordGuess.toLowerCase()) || fourLetterWordSet.has(wordGuess.toLowerCase())) {\n                findGreen(wordGuess.toLowerCase());\n            } else {\n            disableKeyPressRef.current = true;\n            setSymbolResponse(\"times\");\n            setTimeout(() => {\n                if (turnCounter < 3) {\n                    setKeys0([\"\", \"\", \"\", \"\", \"\"]);\n                } else {\n                    setKeys0([\"\", \"\", \"\", \"\"]);\n                }\n                setSymbolResponse(\"\");\n                disableKeyPressRef.current = false;\n            }, 1000);\n            }\n        } else if (turnCounter === 6) {\n            const wordGuess = keys0.join('');\n            if (nineLetterWordSet.has(wordGuess.toLowerCase())) {\n                findGreen(wordGuess.toLowerCase());\n            } else {\n            disableKeyPressRef.current = true;\n            setSymbolResponse(\"times\");\n            setTimeout(() => {\n                setKeys0([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n                setSymbolResponse(\"\");\n                disableKeyPressRef.current = false;\n            }, 1000);\n            }\n        }\n    }\n\n    useEffect(() => {\n        checkWord()\n    }, [keys0]);\n\n    const handleKeyboard = useCallback((event) => {\n        if (disableKeyPressRef.current) {\n            event.preventDefault();\n            return;\n        } else if (event.key === \"Backspace\") {\n            removeLetter()\n        } else if (event.key === \" \") {\n            setGameChosen({gameChosen: false, gameNumber: ''});\n        } else {\n            fauxKeys0.forEach((key) => {\n                if (event.key.toUpperCase() === key.toUpperCase()) {\n                    removeLetter()\n                }            \n            });\n            for (const keys of allKeys) {\n                for (const key of keys) {\n                if (event.key.toLowerCase() === key.toLowerCase()) {\n                    addLetter(key);\n                    break;\n                }\n                }\n            }\n        }\n    }, [fauxKeys0, allKeys]);\n\n    useKeydownEffect(handleKeyboard, [handleKeyboard]);\n\n    return (\n        <div className=\"keyboard\" onKeyDown={handleKeyboard}>\n            <KeyboardNContext.Provider\n                value={{\n                addLetter,\n                removeLetter,\n                guesses,\n                guessColors,\n                turnCounter,\n                disableKeyPressRef}}>\n            <div className='line0'>{keys0.map((key, index) => {\n                const uniqueKey = `0-${index}`;\n                return (\n                  <React.Fragment key={uniqueKey}>\n                  <Key keyVal={key} dark color={keys0DordleColors[index]} keyLine={0} />\n                  </React.Fragment>\n                );\n            })}</div>\n            <div className='line1'>\n                {keys1.map((key, index) => {\n                const uniqueKey = `1-${index}`;\n                return <Key keyVal={key} color={keys1DordleColors[index]} \n                  key={uniqueKey} keyLine={1} />;\n            })}</div>\n            <div className='line2'>\n              {keys2.map((key, index) => {\n              const uniqueKey = `2-${index}`;\n              return <Key keyVal={key} color={keys2DordleColors[index]} \n              key={uniqueKey} keyLine={2} />;\n              })}\n            </div>\n            <div className='line3'>{keys3.map((key, index) => {\n              const uniqueKey = `3-${index}`;\n                return <Key keyVal={key} color={keys3DordleColors[index]} \n                  key={uniqueKey} keyLine={3} />;\n                })}\n            </div>\n            <div className='line4'>< Spacebar keyVal={symbolResponse} /></div>\n            {wordReveal ? (<h1>{wordReveal.toUpperCase()}</h1>) : (<div className='line5'><DordleGuesses /></div>)}\n            </KeyboardNContext.Provider>\n        </div>\n    )\n\n}\n\nexport default KeyboardN","import React, { useContext } from 'react'\nimport { AppContext } from '../../App';\nimport { FaCheck, FaTimes } from '../IconModule';\n\nfunction Spacebar({ keyVal }) {\n  const { setGameChosen } = useContext(AppContext);\n  const selectLetter = () => {\n    setGameChosen({gameChosen: false, gameNumber: ''});\n    };\n\n  let iconComponent = null;\n  let iconColorClass = '';\n\n  if (keyVal === 'check') {\n    iconComponent = <FaCheck />;\n    iconColorClass = 'check-color';\n  } else if (keyVal === 'times') {\n    iconComponent = <FaTimes />;\n    iconColorClass = 'times-color';\n  }\n  \n\n  return (\n      <div className={`key spacebar ${iconColorClass}`} onClick={selectLetter}>\n        {iconComponent}\n      </div>\n    )\n}\n\nexport default Spacebar"],"names":["_ref","boxColor","keyVal","color","_jsx","className","style","backgroundColor","children","_useContext","useContext","KeyboardNContext","guesses","guessColors","nineGuesses1","concat","_toConsumableArray","nineGuesses2","nineGuesses3","nineGuessColors1","nineGuessColors2","nineGuessColors3","_jsxs","map","key","index","uniqueKey","React","DordleBox","dark","keyLine","addLetter","removeLetter","disableKeyPressRef","onClick","current","createContext","AppContext","setGameChosen","keysColor","setKeysColor","_useState","useState","_useState2","_slicedToArray","keys0","setKeys0","keys1","keys2","keys3","allKeys","_useState3","_useState4","keys0DordleColors","setKeys0DordleColors","_useState5","_useState6","keys1DordleColors","setKeys1DordleColors","_useState7","_useState8","keys2DordleColors","setKeys2DordleColors","_useState9","_useState10","keys3DordleColors","setKeys3DordleColors","_useState11","_useState12","greenKeys","setGreenKeys","_useState13","_useState14","yellowKeys","setYellowKeys","_useState15","_useState16","greyKeys","setGreyKeys","_useState17","_useState18","storedColorKeys","setStoredColorKeys","_useState19","_useState20","finalColorKeys","setFinalColorKeys","_useState21","_useState22","setGuesses","_useState23","_useState24","setGuessColors","_useState25","_useState26","turnCounter","setTurnCounter","fauxKeys0","_useState27","Set","_useState28","compoundWordSet","setCompoundWordSet","_useState29","_useState30","fourLetterWordSet","setFourLetterWordSet","_useState31","_useState32","fiveLetterWordSet","setFiveLetterWordSet","_useState33","_useState34","nineLetterWordSet","setNineLetterWordSet","_useState35","_useState36","correctWord","setCorrectWord","_useState37","_useState38","wordReveal","setWordReveal","_useState39","_useState40","symbolResponse","setSymbolResponse","useRef","generateCompoundWordSet","_asyncToGenerator","_regeneratorRuntime","mark","_callee","randomCompoundWord","wrap","_context","prev","next","compoundWordBank","Math","floor","random","size","abrupt","stop","apply","arguments","generateFourLetterWordSet","_ref2","_callee2","_context2","fourLetterWordBank","generateFiveLetterWordSet","_ref3","_callee3","_context3","fiveLetterWordBank","generateNineLetterWordSet","_ref4","_callee4","_context4","nineLetterWordBank","useEffect","fetchData","_ref5","_callee5","compoundWords","fourLetterWords","fiveLetterWords","nineLetterWords","_context5","sent","updatedKeys","emptyIndex","findIndex","val","toUpperCase","findKeyboardColors","colorKeys","value","updateDordleColors","green","yellow","grey","registerAndReset","updatedGuessColors","prevGuessColors","newGuessColors","prevGuesses","newGuesses","setTimeout","prevTurnCounter","some","newCompoundWordSet","Array","from","filter","word","length","newKeysColor","gameChosen","gameNumber","findGrey","wordGuess","uniqueGreenKeys","uniqueYellowKeys","newGreyKeys","i","push","uniqueGreyKeys","includes","finalGreenKeys","finalYellowKeys","has","finalGreyKeys","findFinalColorKeys","findYellow","compound","newCompound","join","newYellowKeys","replace","newCorrectWord","findGreen","newWordGuess","slice","newGreenKeys","toLowerCase","checkWord","handleKeyboard","useCallback","event","preventDefault","forEach","_i4","_allKeys","_step","keys","_iterator","_createForOfIteratorHelper","s","n","done","err","e","f","useKeydownEffect","onKeyDown","Provider","Key","Spacebar","DordleGuesses","iconComponent","iconColorClass","FaCheck","FaTimes"],"sourceRoot":""}
{"version":3,"file":"static/js/1690.b73cb393.chunk.js","mappings":"gJAgBA,UAbA,SAAYA,GAA0B,IAAvBC,EAAMD,EAANC,OAAQC,EAAGF,EAAHE,IAAKC,EAAKH,EAALG,MAClBC,GAAcC,EAAAA,EAAAA,YAAWC,EAAAA,kBAAzBF,UAKR,OACIG,EAAAA,EAAAA,KAAA,OAAKC,UAAWN,EAAM,cAAgB,eAAgBC,MAAOA,EAAOM,QALtD,WAChBL,EAAUH,EACV,EAGyFS,SACpFT,GAGT,C,wKCRaK,GAAmBK,EAAAA,EAAAA,iBA2ThC,UAzTA,WACI,IAAAC,GAAmDP,EAAAA,EAAAA,YAAWQ,EAAAA,GAAtDC,EAAaF,EAAbE,cAAeC,EAASH,EAATG,UAAWC,EAAYJ,EAAZI,aAClCC,GAA0BC,EAAAA,EAAAA,UAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/EI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,GAA0BL,EAAAA,EAAAA,UAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA/EE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAA0BT,EAAAA,EAAAA,UAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA1EE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAA0Bb,EAAAA,EAAAA,UAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAAKc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAAhEE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAChBG,EAAU,CAACd,EAAOI,EAAOI,EAAOI,GAEtCG,GAAgClB,EAAAA,EAAAA,UAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAGmB,GAAAjB,EAAAA,EAAAA,GAAAgB,EAAA,GAAjEE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAAgCtB,EAAAA,EAAAA,UAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAGuB,GAAArB,EAAAA,EAAAA,GAAAoB,EAAA,GAAjEE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAAgC1B,EAAAA,EAAAA,UAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAG2B,GAAAzB,EAAAA,EAAAA,GAAAwB,EAAA,GAA9DE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAAgC9B,EAAAA,EAAAA,UAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAG+B,GAAA7B,EAAAA,EAAAA,GAAA4B,EAAA,GAAxDE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAE5BG,GAAwClC,EAAAA,EAAAA,UAAS,IAAGmC,GAAAjC,EAAAA,EAAAA,GAAAgC,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,GAA4CtC,EAAAA,EAAAA,UAAS,IAAGuC,GAAArC,EAAAA,EAAAA,GAAAoC,EAAA,GAAjDE,EAAcD,EAAA,GAAEE,GAAiBF,EAAA,GAwKlCrD,GAAY,SAACwD,GACjB,GAA4B,IAAxBN,EAAaO,OACfN,EAAgB,CAACK,SACZ,GAA4B,IAAxBN,EAAaO,OAAc,CACpC,IAAOC,GAAP1C,EAAAA,EAAAA,GAAmBkC,EAAY,GAAhB,GAEf,GAAI,UAAUS,KAAKD,IAAa,UAAUC,KAAKH,IAE7C,GAAIvC,EAAM2C,SAASF,IAAazC,EAAM2C,SAASJ,GAAM,CACnD,IAAMK,EAAe5C,EAAM6C,KAAI,SAACC,GAC9B,OAAIA,IAAML,EAAiBF,EACvBO,IAAMP,EAAYE,EACfK,CACT,IACA7C,EAAS2C,GACTV,EAAgB,GAClB,OACK,GAAI,aAAaQ,KAAKD,IAAa,aAAaC,KAAKH,GAAM,CAEhE,IAIuCQ,EAHjCC,EADS,CAAC5C,EAAOI,EAAOI,GACMqC,QAAO,SAACC,GAAI,OAAKA,EAAKP,SAASF,IAAaS,EAAKP,SAASJ,EAAI,IAElGY,GAAAC,EAAAA,EAAAA,GACmBJ,GAAoB,IAAvC,IAAAG,EAAAE,MAAAN,EAAAI,EAAAG,KAAAC,MAAyC,CAAC,IAA/BL,EAAIH,EAAAS,MACPC,EAAcP,EAAKL,KAAI,SAACC,GAC5B,OAAIA,IAAML,EAAiBF,EACvBO,IAAMP,EAAYE,EACfK,CACT,IAGII,IAAS9C,EACXC,EAASoD,GACAP,IAAS1C,EAClBC,EAASgD,GACAP,IAAStC,GAClBC,EAAS4C,EAEb,CAAC,OAAAC,GAAAP,EAAAQ,EAAAD,EAAA,SAAAP,EAAAS,GAAA,CACD1B,EAAgB,GAClB,MACEA,EAAgB,CAACK,GAErB,CACF,GAEAsB,EAAAA,EAAAA,YAAU,YAvMY,WACpB,IAAIC,EAAkB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAClD9D,EAAM+D,SAAQ,SAACxB,EAAKyB,GAClB,IAAMC,EAAa1B,EAAI2B,WAAW,GAClC,GAAc,IAAVF,EAAa,CACf,IACMG,EADUnE,EAAMgE,EAAQ,GACCE,WAAW,GAEI,IAA1CE,KAAKC,IAAIJ,EAAaE,KACxBL,EAAgBE,GAAS,EAE7B,MAAO,GAAIA,IAAUhE,EAAMwC,OAAS,EAAG,CACrC,IACM8B,EADUtE,EAAMgE,EAAQ,GACCE,WAAW,GAEI,IAA1CE,KAAKC,IAAIJ,EAAaK,KACxBR,EAAgBE,GAAS,EAE7B,MAAO,GAAGA,EAAQ,GAAKA,EAAQhE,EAAMwC,OAAS,EAAG,CAC/C,IAAM+B,EAAUvE,EAAMgE,EAAQ,GACxBQ,EAAUxE,EAAMgE,EAAQ,GACxBM,EAAiBC,EAAQL,WAAW,GACpCC,EAAiBK,EAAQN,WAAW,GAEI,IAA1CE,KAAKC,IAAIJ,EAAaK,IAAmE,IAA1CF,KAAKC,IAAIJ,EAAaE,KACvEL,EAAgBE,GAAS,EAE7B,CAEF,IACA9C,EAAY4C,EACd,CAyKEW,GAvKoB,WACpB,IAAIC,EAAkB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC9CC,EAAkB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3CC,EAAkB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzCxE,EAAM2D,SAAQ,SAACxB,EAAKyB,GAClB,IAAMC,EAAa1B,EAAI2B,WAAW,GAClC,GAAc,IAAVF,EAAa,CACf,IACMa,EADUzE,EAAM4D,EAAQ,GACCE,WAAW,GAEpCY,EADetE,EAAMwD,GACcE,WAAW,GAEN,IAA1CE,KAAKC,IAAIJ,EAAaY,IAAwE,IAA/CT,KAAKC,IAAIJ,EAAaa,KACvEJ,EAAgBV,GAAS,EAE7B,MAAO,GAAIA,IAAU5D,EAAMoC,OAAS,EAAG,CACrC,IACM8B,EADUlE,EAAM4D,EAAQ,GACCE,WAAW,GAEpCa,EADcvE,EAAMwD,EAAQ,GACKE,WAAW,GAEJ,IAA1CE,KAAKC,IAAIJ,EAAaK,IAAuE,IAA9CF,KAAKC,IAAIJ,EAAac,KACvEL,EAAgBV,GAAS,EAE7B,MAAO,GAAGA,EAAQ,GAAKA,EAAQ5D,EAAMoC,OAAS,EAAG,CAC/C,IAAM+B,EAAUnE,EAAM4D,EAAQ,GACxBQ,EAAUpE,EAAM4D,EAAQ,GACxBM,EAAiBC,EAAQL,WAAW,GACpCC,EAAiBK,EAAQN,WAAW,GAEpCa,EADcvE,EAAMwD,EAAQ,GACKE,WAAW,GAE5CY,EADetE,EAAMwD,GACcE,WAAW,IAEN,IAA1CE,KAAKC,IAAIJ,EAAaK,IAAmE,IAA1CF,KAAKC,IAAIJ,EAAaE,IACrEC,KAAKC,IAAIJ,EAAac,IAAuB,GAAoD,IAA/CX,KAAKC,IAAIJ,EAAaa,OAC1EJ,EAAgBV,GAAS,EAE7B,CACF,IACAxD,EAAMuD,SAAQ,SAACxB,EAAKyB,GAClB,IAAMC,EAAa1B,EAAI2B,WAAW,GAClC,GAAc,IAAVF,EAAa,CACf,IACMa,EADUrE,EAAMwD,EAAQ,GACCE,WAAW,GAEpCc,EADY5E,EAAM4D,GACWE,WAAW,GAExCe,EADa7E,EAAM4D,EAAQ,GACIE,WAAW,GAEF,IAA1CE,KAAKC,IAAIJ,EAAaY,IAAqE,IAA5CT,KAAKC,IAAIJ,EAAae,IACxB,IAA7CZ,KAAKC,IAAIJ,EAAagB,KACxBN,EAAgBX,GAAS,EAE7B,MAAO,GAAIA,IAAUxD,EAAMgC,OAAS,EAAG,CACrC,IACM8B,EADU9D,EAAMwD,EAAQ,GACCE,WAAW,GAEpCc,EADY5E,EAAM4D,GACWE,WAAW,GAExCe,EADa7E,EAAM4D,EAAQ,GACIE,WAAW,GAEF,IAA1CE,KAAKC,IAAIJ,EAAaK,IAAqE,IAA5CF,KAAKC,IAAIJ,EAAae,IACzB,IAA7CZ,KAAKC,IAAIJ,EAAagB,KACvBN,EAAgBX,GAAS,EAE7B,MAAO,GAAGA,EAAQ,GAAKA,EAAQxD,EAAMgC,OAAS,EAAG,CAC/C,IAAM+B,EAAU/D,EAAMwD,EAAQ,GACxBQ,EAAUhE,EAAMwD,EAAQ,GACxBM,EAAiBC,EAAQL,WAAW,GACpCC,EAAiBK,EAAQN,WAAW,GAEpCgB,EADUtE,EAAMoD,EAAQ,GACCE,WAAW,GAEpCc,EADY5E,EAAM4D,GACWE,WAAW,GAExCe,EADa7E,EAAM4D,EAAQ,GACIE,WAAW,GAEF,IAA1CE,KAAKC,IAAIJ,EAAaK,IAAmE,IAA1CF,KAAKC,IAAIJ,EAAaE,IAC3B,IAA1CC,KAAKC,IAAIJ,EAAaiB,IAAqE,IAA5Cd,KAAKC,IAAIJ,EAAae,IACxB,IAA7CZ,KAAKC,IAAIJ,EAAagB,KACxBN,EAAgBX,GAAS,EAE7B,CACF,IACApD,EAAMmD,SAAQ,SAACxB,EAAKyB,GAClB,IAAMC,EAAa1B,EAAI2B,WAAW,GAE5BiB,EADQ3E,EAAMwD,EAAQ,GACDE,WAAW,GACtC,GAAc,IAAVF,EAAa,CACf,IACMa,EADUjE,EAAMoD,EAAQ,GACCE,WAAW,GAEI,IAA1CE,KAAKC,IAAIJ,EAAaY,IAAiE,IAAxCT,KAAKC,IAAIJ,EAAakB,KACvEP,EAAgBZ,GAAS,EAE7B,MAAO,GAAIA,IAAUpD,EAAM4B,OAAS,EAAG,CACrC,IACM8B,EADU1D,EAAMoD,EAAQ,GACCE,WAAW,GAEI,IAA1CE,KAAKC,IAAIJ,EAAaK,IAAiE,IAAxCF,KAAKC,IAAIJ,EAAakB,KACvEP,EAAgBZ,GAAS,EAE7B,MAAO,GAAGA,EAAQ,GAAKA,EAAQpD,EAAM4B,OAAS,EAAG,CAC/C,IAAM+B,EAAU3D,EAAMoD,EAAQ,GACxBQ,EAAU5D,EAAMoD,EAAQ,GACxBM,EAAiBC,EAAQL,WAAW,GACpCC,EAAiBK,EAAQN,WAAW,GAEI,IAA1CE,KAAKC,IAAIJ,EAAaK,IAAmE,IAA1CF,KAAKC,IAAIJ,EAAaE,IAC7B,IAAxCC,KAAKC,IAAIJ,EAAakB,KACxBP,EAAgBZ,GAAS,EAE7B,CACF,IACA1C,EAAYoD,GACZhD,EAAYiD,GACZ7C,EAAY8C,EACd,CAkDEQ,EAEF,GAAG,CAACnD,KAEJ4B,EAAAA,EAAAA,YAAU,WAzNY5C,EAAS0B,SAAS,IAAMtB,EAASsB,SAAS,IAAMlB,EAASkB,SAAS,IAAMd,EAASc,SAAS,KAE5GL,GAAkB,SAClB+C,YAAW,WACT,IAAIC,GAAYC,EAAAA,EAAAA,GAAO7F,GACvB4F,EAAa,GAAG,GAAK,EACrB3F,EAAa2F,GACb7F,EAAc,CAAE+F,YAAY,EAAOC,WAAY,IACjD,GAAG,KAoNP,GAAG,CAACxE,EAAUI,EAAUI,EAAUI,IAElC,IAAM6D,IAAiBC,EAAAA,EAAAA,cAAY,SAACC,GAChC,GAAiB,cAAdA,EAAMrD,UAEF,GAAkB,MAAdqD,EAAMrD,IACb9C,EAAc,CAAC+F,YAAY,EAAOC,WAAY,UAE9C,QAAAI,EAAA,EAAAC,EAAmBhF,EAAO+E,EAAAC,EAAAtD,OAAAqD,IAAE,CAAvB,IACqBE,EADf7C,EAAI4C,EAAAD,GAAAG,GAAA5C,EAAAA,EAAAA,GACOF,GAAI,IAAtB,IAAA8C,EAAA3C,MAAA0C,EAAAC,EAAA1C,KAAAC,MAAwB,CAAC,IAAdhB,EAAGwD,EAAAvC,MACZ,GAAIoC,EAAMrD,IAAI0D,gBAAkB1D,EAAI0D,cAAe,CACjDlH,GAAUwD,GACV,KACF,CACF,CAAC,OAAAmB,GAAAsC,EAAArC,EAAAD,EAAA,SAAAsC,EAAApC,GAAA,CACH,CAEV,GAAG,CAAC9C,IAgBJ,OAFAoF,EAAAA,EAAAA,IAAiBR,GAAgB,CAACA,MAG9BxG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAWgH,UAAWT,GAAerG,UAChD+G,EAAAA,EAAAA,MAACnH,EAAiBoH,SAAQ,CACtB7C,MAAO,CACPzE,UAAAA,IAAWM,SAAA,EACfH,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOE,SAAEW,EAAM6C,KAAI,SAACN,EAAKyB,GACpC,IAAMsC,EAAS,KAAAC,OAAQvC,GACvB,OAAO9E,EAAAA,EAAAA,KAACsH,EAAAA,QAAG,CAAC5H,OAAQ2D,EAElB1D,IAAyB,IAApBoC,EAAS+C,GACdlF,MAAOmD,EAAa,KAAOM,EAAM,CAAEkE,MAAO,UAAa,CAAC,GAFnDH,EAGX,OACApH,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOE,SACjBe,EAAMyC,KAAI,SAACN,EAAKyB,GACjB,IAAMsC,EAAS,KAAAC,OAAQvC,GACvB,OAAO9E,EAAAA,EAAAA,KAACsH,EAAAA,QAAG,CAAC5H,OAAQ2D,EAElB1D,IAAyB,IAApBwC,EAAS2C,GACdlF,MAAOmD,EAAa,KAAOM,EAAM,CAAEkE,MAAO,UAAa,CAAC,GAFnDH,EAGX,OACApH,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOE,SACnBmB,EAAMqC,KAAI,SAACN,EAAKyB,GACjB,IAAMsC,EAAS,KAAAC,OAAQvC,GACvB,OAAO9E,EAAAA,EAAAA,KAACsH,EAAAA,QAAG,CAAC5H,OAAQ2D,EAEpB1D,IAAyB,IAApB4C,EAASuC,GACdlF,MAAOmD,EAAa,KAAOM,EAAM,CAAEkE,MAAO,UAAa,CAAC,GAFnDH,EAEyD,OAEhEpH,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOE,SAAEuB,EAAMiC,KAAI,SAACN,EAAKyB,GACtC,IAAMsC,EAAS,KAAAC,OAAQvC,GACrB,OAAO9E,EAAAA,EAAAA,KAACsH,EAAAA,QAAG,CAAC5H,OAAQ2D,EAElB1D,IAAyB,IAApBgD,EAASmC,GACdlF,MAAOmD,EAAa,KAAOM,EAAM,CAAEkE,MAAO,UAAa,CAAC,GAFnDH,EAGP,OAEJpH,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOE,UAACH,EAAAA,EAAAA,KAAEwH,EAAAA,QAAQ,CAAC9H,OAAQyD,UAKtD,C,yEClSA,UAzBA,SAAiB1D,GAAc,IAAXC,EAAMD,EAANC,OACVa,GAAkBT,EAAAA,EAAAA,YAAWQ,EAAAA,GAA7BC,cAKJkH,EAAgB,KAChBC,EAAiB,GAWrB,MATe,UAAXhI,GACF+H,GAAgBzH,EAAAA,EAAAA,KAAC2H,EAAAA,IAAO,IACxBD,EAAiB,eACG,UAAXhI,IACT+H,GAAgBzH,EAAAA,EAAAA,KAAC4H,EAAAA,IAAO,IACxBF,EAAiB,gBAKf1H,EAAAA,EAAAA,KAAA,OAAKC,UAAS,gBAAAoH,OAAkBK,GAAkBxH,QAjBjC,WACnBK,EAAc,CAAC+F,YAAY,EAAOC,WAAY,IAC9C,EAe0EpG,SACrEsH,GAGT,C","sources":["components/Game3/Key3.js","components/Game3/Keyboard3.js","components/Game3/Spacebar3.js"],"sourcesContent":["import React, { useContext } from 'react'\nimport { Keyboard3Context } from './Keyboard3';\n\nfunction Key({ keyVal, red, style }) {\n  const { selectKey } = useContext(Keyboard3Context);\n  const chooseKey = () => {\n    selectKey(keyVal);\n    };\n\n  return (\n      <div className={red ? 'key red_key' : 'key blue_key'} style={style} onClick={chooseKey}>\n        {keyVal}\n      </div>\n    )\n}\n\nexport default Key","import React, { useCallback, useContext, useEffect, useState, createContext } from 'react';\nimport { AppContext } from '../../App';\nimport { useKeydownEffect } from '../../utils';\nimport Key from './Key3';\nimport Spacebar from './Spacebar3';\n\nexport const Keyboard3Context = createContext();\n\nfunction Keyboard3() {\n    const { setGameChosen, keysColor, setKeysColor } = useContext(AppContext);\n    const [keys0, setKeys0] = useState([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]);\n    const [keys1, setKeys1] = useState([\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"]);\n    const [keys2, setKeys2] = useState([\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\"]);\n    const [keys3, setKeys3] = useState([\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\"]);\n    const allKeys = [keys0, keys1, keys2, keys3]\n\n    const [keys0Red, setKeys0Red] = useState([1, 1, 1, 1, 1, 1, 1, 1, 1, 0]);\n    const [keys1Red, setKeys1Red] = useState([0, 0, 1, 0, 0, 0, 0, 1, 1, 1]);\n    const [keys2Red, setKeys2Red] = useState([0, 0, 1, 1, 1, 1, 1, 1, 1]);\n    const [keys3Red, setKeys3Red] = useState([0, 0, 0, 0, 0, 1, 1]);\n    \n    const [selectedKeys, setSelectedKeys] = useState([]);\n    const [symbolResponse, setSymbolResponse] = useState(\"\")\n\n    const checkGameOver = () => {\n      const isOneExists = keys0Red.includes(1) || keys1Red.includes(1) || keys2Red.includes(1) || keys3Red.includes(1);\n      if (!isOneExists) {\n        setSymbolResponse(\"check\");\n        setTimeout(() => {\n          let newKeysColor = [...keysColor];\n          newKeysColor[0][2] = 1;\n          setKeysColor(newKeysColor);\n          setGameChosen({ gameChosen: false, gameNumber: '' });\n        }, 1000);\n        }\n      }\n\n    const seeRedNumbers = () => {\n      let updatedKeys0Red = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n      keys0.forEach((key, index) => {\n        const numberCode = key.charCodeAt(0);\n        if (index === 0) {\n          const nextKey = keys0[index + 1];\n          const nextNumberCode = nextKey.charCodeAt(0);\n\n          if (Math.abs(numberCode - nextNumberCode) === 1) {\n            updatedKeys0Red[index] = 1;\n          }\n        } else if (index === keys0.length - 1) {\n          const prevKey = keys0[index - 1];\n          const prevNumberCode = prevKey.charCodeAt(0);\n          \n          if (Math.abs(numberCode - prevNumberCode) === 1) {\n            updatedKeys0Red[index] = 1;\n          }\n        } else if(index > 0 && index < keys0.length - 1) {\n          const prevKey = keys0[index - 1];\n          const nextKey = keys0[index + 1];\n          const prevNumberCode = prevKey.charCodeAt(0);\n          const nextNumberCode = nextKey.charCodeAt(0);\n          \n          if (Math.abs(numberCode - prevNumberCode) === 1 || Math.abs(numberCode - nextNumberCode) === 1) {\n            updatedKeys0Red[index] = 1;\n          }\n        }\n        \n      });\n      setKeys0Red(updatedKeys0Red)\n    }\n\n    const seeRedLetters = () => {\n      let updatedKeys1Red = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n      let updatedKeys2Red = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n      let updatedKeys3Red = [0, 0, 0, 0, 0, 0, 0]\n      keys1.forEach((key, index) => {\n        const numberCode = key.charCodeAt(0);\n        if (index === 0) {\n          const nextKey = keys1[index + 1];\n          const nextLetterCode = nextKey.charCodeAt(0);\n          const downRightKey = keys2[index];\n          const downRightLetterCode = downRightKey.charCodeAt(0);\n\n          if (Math.abs(numberCode - nextLetterCode) === 1 || Math.abs(numberCode - downRightLetterCode) === 1) {\n            updatedKeys1Red[index] = 1;\n          }\n        } else if (index === keys1.length - 1) {\n          const prevKey = keys1[index - 1];\n          const prevNumberCode = prevKey.charCodeAt(0);\n          const downLeftKey = keys2[index - 1];\n          const downLeftLetterCode = downLeftKey.charCodeAt(0);\n          \n          if (Math.abs(numberCode - prevNumberCode) === 1 || Math.abs(numberCode - downLeftLetterCode) === 1) {\n            updatedKeys1Red[index] = 1;\n          }\n        } else if(index > 0 && index < keys1.length - 1) {\n          const prevKey = keys1[index - 1];\n          const nextKey = keys1[index + 1];\n          const prevNumberCode = prevKey.charCodeAt(0);\n          const nextNumberCode = nextKey.charCodeAt(0);\n          const downLeftKey = keys2[index - 1];\n          const downLeftLetterCode = downLeftKey.charCodeAt(0);\n          const downRightKey = keys2[index];\n          const downRightLetterCode = downRightKey.charCodeAt(0);\n          \n          if (Math.abs(numberCode - prevNumberCode) === 1 || Math.abs(numberCode - nextNumberCode) === 1\n           || Math.abs(numberCode - downLeftLetterCode === 1 || Math.abs(numberCode - downRightLetterCode) === 1)) {\n            updatedKeys1Red[index] = 1;\n          }\n        }\n      });\n      keys2.forEach((key, index) => {\n        const numberCode = key.charCodeAt(0);\n        if (index === 0) {\n          const nextKey = keys2[index + 1];\n          const nextLetterCode = nextKey.charCodeAt(0);\n          const upLeftKey = keys1[index];\n          const upLeftLetterCode = upLeftKey.charCodeAt(0);\n          const upRightKey = keys1[index + 1];\n          const upRightLetterCode = upRightKey.charCodeAt(0);\n\n          if (Math.abs(numberCode - nextLetterCode) === 1 || Math.abs(numberCode - upLeftLetterCode) === 1\n           || Math.abs(numberCode - upRightLetterCode) === 1) {\n            updatedKeys2Red[index] = 1;\n          }\n        } else if (index === keys2.length - 1) {\n          const prevKey = keys2[index - 1];\n          const prevNumberCode = prevKey.charCodeAt(0);\n          const upLeftKey = keys1[index];\n          const upLeftLetterCode = upLeftKey.charCodeAt(0);\n          const upRightKey = keys1[index + 1];\n          const upRightLetterCode = upRightKey.charCodeAt(0);\n          \n          if (Math.abs(numberCode - prevNumberCode) === 1 || Math.abs(numberCode - upLeftLetterCode) === 1\n          || Math.abs(numberCode - upRightLetterCode) === 1) {\n            updatedKeys2Red[index] = 1;\n          }\n        } else if(index > 0 && index < keys2.length - 1) {\n          const prevKey = keys2[index - 1];\n          const nextKey = keys2[index + 1];\n          const prevNumberCode = prevKey.charCodeAt(0);\n          const nextNumberCode = nextKey.charCodeAt(0);\n          const downKey = keys3[index - 1];\n          const downLetterCode = downKey.charCodeAt(0);\n          const upLeftKey = keys1[index];\n          const upLeftLetterCode = upLeftKey.charCodeAt(0);\n          const upRightKey = keys1[index + 1];\n          const upRightLetterCode = upRightKey.charCodeAt(0);\n          \n          if (Math.abs(numberCode - prevNumberCode) === 1 || Math.abs(numberCode - nextNumberCode) === 1\n           || Math.abs(numberCode - downLetterCode) === 1 || Math.abs(numberCode - upLeftLetterCode) === 1\n           || Math.abs(numberCode - upRightLetterCode) === 1) {\n            updatedKeys2Red[index] = 1;\n          }\n        }\n      });\n      keys3.forEach((key, index) => {\n        const numberCode = key.charCodeAt(0);\n        const upKey = keys2[index + 1];\n        const upLetterCode = upKey.charCodeAt(0);\n        if (index === 0) {\n          const nextKey = keys3[index + 1];\n          const nextLetterCode = nextKey.charCodeAt(0);\n\n          if (Math.abs(numberCode - nextLetterCode) === 1 || Math.abs(numberCode - upLetterCode) === 1) {\n            updatedKeys3Red[index] = 1;\n          }\n        } else if (index === keys3.length - 1) {\n          const prevKey = keys3[index - 1];\n          const prevNumberCode = prevKey.charCodeAt(0);\n          \n          if (Math.abs(numberCode - prevNumberCode) === 1 || Math.abs(numberCode - upLetterCode) === 1) {\n            updatedKeys3Red[index] = 1;\n          }\n        } else if(index > 0 && index < keys3.length - 1) {\n          const prevKey = keys3[index - 1];\n          const nextKey = keys3[index + 1];\n          const prevNumberCode = prevKey.charCodeAt(0);\n          const nextNumberCode = nextKey.charCodeAt(0);\n          \n          if (Math.abs(numberCode - prevNumberCode) === 1 || Math.abs(numberCode - nextNumberCode) === 1\n           || Math.abs(numberCode - upLetterCode) === 1) {\n            updatedKeys3Red[index] = 1;\n          }\n        }\n      });\n      setKeys1Red(updatedKeys1Red)\n      setKeys2Red(updatedKeys2Red)\n      setKeys3Red(updatedKeys3Red)\n    }\n\n    const selectKey = (key) => {\n      if (selectedKeys.length === 0) {\n        setSelectedKeys([key]);\n      } else if (selectedKeys.length === 1) {\n        const [firstKey] = selectedKeys;\n        \n        if (/^[0-9]$/.test(firstKey) && /^[0-9]$/.test(key)) {\n          // Swap keys within keys0 array\n          if (keys0.includes(firstKey) && keys0.includes(key)) {\n            const updatedKeys0 = keys0.map((k) => {\n              if (k === firstKey) return key;\n              if (k === key) return firstKey;\n              return k;\n            });\n            setKeys0(updatedKeys0);\n            setSelectedKeys([]);\n          }\n        } else if (/^[A-Za-z]$/.test(firstKey) && /^[A-Za-z]$/.test(key)) {\n          // Find arrays that contain both firstKey and key\n          const arrays = [keys1, keys2, keys3];\n          const arraysContainingKeys = arrays.filter((keys) => keys.includes(firstKey) || keys.includes(key));\n\n          // Swap values in the repetitive arrays\n          for (const keys of arraysContainingKeys) {\n            const updatedKeys = keys.map((k) => {\n              if (k === firstKey) return key;\n              if (k === key) return firstKey;\n              return k;\n            });\n\n            // Update the state with the swapped values\n            if (keys === keys1) {\n              setKeys1(updatedKeys);\n            } else if (keys === keys2) {\n              setKeys2(updatedKeys);\n            } else if (keys === keys3) {\n              setKeys3(updatedKeys);\n            }\n          }\n          setSelectedKeys([]);\n        } else {\n          setSelectedKeys([key])\n        }\n      }\n    };\n\n    useEffect(() => {\n      seeRedNumbers();\n      seeRedLetters();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedKeys]);\n\n    useEffect(() => {\n      checkGameOver();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [keys0Red, keys1Red, keys2Red, keys3Red]);\n\n    const handleKeyboard = useCallback((event) => {\n        if(event.key === \"Backspace\") {\n\n        } else if (event.key === \" \") {\n            setGameChosen({gameChosen: false, gameNumber: ''});\n        } else {\n            for (const keys of allKeys) {\n                for (const key of keys) {\n                  if (event.key.toLowerCase() === key.toLowerCase()) {\n                    selectKey(key);\n                    break;\n                  }\n                }\n              }\n            }\n    }, [allKeys]);\n\n    // useEffect(() => {\n    //     const handleKeyDown = (event) => {\n    //       handleKeyboard(event);\n    //     };\n      \n    //     document.addEventListener(\"keydown\", handleKeyDown);\n      \n    //     return () => {\n    //       document.removeEventListener(\"keydown\", handleKeyDown);\n    //     };\n    // }, [handleKeyboard]);\n\n    useKeydownEffect(handleKeyboard, [handleKeyboard]);\n\n    return (\n        <div className=\"keyboard\" onKeyDown={handleKeyboard}>\n            <Keyboard3Context.Provider\n                value={{\n                selectKey}}>\n            <div className='line0'>{keys0.map((key, index) => {\n                const uniqueKey = `0-${index}`;\n                return <Key keyVal={key}\n                  key={uniqueKey}\n                  red={keys0Red[index] === 1}\n                  style={selectedKeys[0] === key ? { color: 'yellow' } : {}} />;\n            })}</div>\n            <div className='line1'>\n                {keys1.map((key, index) => {\n                const uniqueKey = `1-${index}`;\n                return <Key keyVal={key}\n                  key={uniqueKey}\n                  red={keys1Red[index] === 1}\n                  style={selectedKeys[0] === key ? { color: 'yellow' } : {}} />;\n            })}</div>\n            <div className='line2'>\n              {keys2.map((key, index) => {\n              const uniqueKey = `2-${index}`;\n              return <Key keyVal={key} \n              key={uniqueKey}\n              red={keys2Red[index] === 1}\n              style={selectedKeys[0] === key ? { color: 'yellow' } : {}} />;})}\n            </div>\n            <div className='line3'>{keys3.map((key, index) => {\n              const uniqueKey = `3-${index}`;\n                return <Key keyVal={key}\n                  key={uniqueKey}\n                  red={keys3Red[index] === 1}\n                  style={selectedKeys[0] === key ? { color: 'yellow' } : {}} />;\n                })}\n            </div>\n            <div className='line4'>< Spacebar keyVal={symbolResponse} /></div>\n            </Keyboard3Context.Provider>\n        </div>\n    )\n\n}\n\nexport default Keyboard3","import React, { useContext } from 'react'\nimport { AppContext } from '../../App';\nimport { FaCheck, FaTimes } from '../IconModule';\n\nfunction Spacebar({ keyVal }) {\n  const { setGameChosen } = useContext(AppContext);\n  const selectLetter = () => {\n    setGameChosen({gameChosen: false, gameNumber: ''});\n    };\n\n  let iconComponent = null;\n  let iconColorClass = '';\n\n  if (keyVal === 'check') {\n    iconComponent = <FaCheck />;\n    iconColorClass = 'check-color';\n  } else if (keyVal === 'times') {\n    iconComponent = <FaTimes />;\n    iconColorClass = 'times-color';\n  }\n  \n\n  return (\n      <div className={`key spacebar ${iconColorClass}`} onClick={selectLetter}>\n        {iconComponent}\n      </div>\n    )\n}\n\nexport default Spacebar"],"names":["_ref","keyVal","red","style","selectKey","useContext","Keyboard3Context","_jsx","className","onClick","children","createContext","_useContext","AppContext","setGameChosen","keysColor","setKeysColor","_useState","useState","_useState2","_slicedToArray","keys0","setKeys0","_useState3","_useState4","keys1","setKeys1","_useState5","_useState6","keys2","setKeys2","_useState7","_useState8","keys3","setKeys3","allKeys","_useState9","_useState10","keys0Red","setKeys0Red","_useState11","_useState12","keys1Red","setKeys1Red","_useState13","_useState14","keys2Red","setKeys2Red","_useState15","_useState16","keys3Red","setKeys3Red","_useState17","_useState18","selectedKeys","setSelectedKeys","_useState19","_useState20","symbolResponse","setSymbolResponse","key","length","firstKey","test","includes","updatedKeys0","map","k","_step","arraysContainingKeys","filter","keys","_iterator","_createForOfIteratorHelper","s","n","done","value","updatedKeys","err","e","f","useEffect","updatedKeys0Red","forEach","index","numberCode","charCodeAt","nextNumberCode","Math","abs","prevNumberCode","prevKey","nextKey","seeRedNumbers","updatedKeys1Red","updatedKeys2Red","updatedKeys3Red","nextLetterCode","downRightLetterCode","downLeftLetterCode","upLeftLetterCode","upRightLetterCode","downLetterCode","upLetterCode","seeRedLetters","setTimeout","newKeysColor","_toConsumableArray","gameChosen","gameNumber","handleKeyboard","useCallback","event","_i","_allKeys","_step2","_iterator2","toLowerCase","useKeydownEffect","onKeyDown","_jsxs","Provider","uniqueKey","concat","Key","color","Spacebar","iconComponent","iconColorClass","FaCheck","FaTimes"],"sourceRoot":""}
{"version":3,"file":"static/js/1735.b91905c4.chunk.js","mappings":"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","sources":["components/GameP/KeyP.js","components/GameP/KeyboardP.js","components/GameP/SpacebarP.js","components/GameP/TriangleP.js","components/GameP/TriangleUnitP.js"],"sourcesContent":["import React, { useContext } from 'react'\nimport { KeyboardPContext } from './KeyboardP';\n\nfunction Key({ keyVal, dark, clickableKey, symbol }) {\n  const { addNumber } = useContext(KeyboardPContext);\n  const selectLetter = () => {\n    if (clickableKey) {\n      addNumber(keyVal); \n    }};\n\n  return (\n      <div className={'key'} onClick={selectLetter}>\n        {keyVal}\n      </div>\n    )\n}\n\nexport default Key","import React, { useCallback, useContext, useEffect, useState, createContext, useRef } from 'react';\nimport { AppContext } from '../../App';\nimport { useKeydownEffect } from '../../utils';\nimport Key from './KeyP';\nimport Spacebar from './SpacebarP';\nimport Triangle from './TriangleP';\n\nexport const KeyboardPContext = createContext();\n\nfunction KeyboardP() {\n    const { setGameChosen, keysColor, setKeysColor } = useContext(AppContext);\n    const keys0 = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"];\n    const [guess, setGuess] = useState(\"\");\n\n    const [numberArray, setNumberArray] = useState([\n        [''],\n        ['', ''],\n        ['', '', ''],\n        ['', '', '', ''],\n        ['', '', '', '', ''],\n        ['', '', '', '', '', ''],\n        ['', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', '', '', '', '', ''],\n    ]);\n\n    const pascalsTriangle = [\n        ['1'],\n        ['1', '1'],\n        ['1', '2', '1'],\n        ['1', '3', '3', '1'],\n        ['1', '4', '6', '4', '1'],\n        ['1', '5', '10', '10', '5', '1'],\n        ['1', '6', '15', '20', '15', '6', '1'],\n        ['1', '7', '21', '35', '35', '21', '7', '1'],\n        ['1', '8', '28', '56', '70', '56', '28', '8', '1'],\n        ['1', '9', '36', '84', '126', '126', '84', '36', '9', '1'],\n        ['1', '10', '45', '120', '210', '252', '210', '120', '45', '10', '1'],\n        ['1', '11', '55', '165', '330', '462', '462', '330', '165', '55', '11', '1'],\n        ['1', '12', '66', '220', '495', '792', '924', '792', '495', '220', '66', '12', '1'],\n    ];\n\n    const [symbolResponse, setSymbolResponse] = useState(\"\");\n    const [xResponse, setXResponse] = useState(\"\");\n\n    const disableKeyPressRef = useRef(false);\n\n    const gameOver = () => {\n        disableKeyPressRef.current = true;\n        setSymbolResponse(\"check\");\n        setTimeout(() => {\n            setSymbolResponse(\"\");\n            let newKeysColor = [...keysColor];\n            newKeysColor[1][9] = 1;\n            setKeysColor(newKeysColor);\n            setGameChosen({ gameChosen: false, gameNumber: '' });\n            disableKeyPressRef.current = false;\n        }, 1000);\n    }\n\n    const badGuess = () => {\n        setXResponse(\"times\");\n        disableKeyPressRef.current = true;\n        setTimeout(() => {\n            setGuess(\"\");\n            setXResponse(\"\");\n            disableKeyPressRef.current = false;\n        }, 500);\n    }\n\n    const checkGuess = () => {\n        let newNumberArray = [...numberArray];\n        if (numberArray.flat().includes(\"\")) {\n            let emptyIndex = null;\n            let row = null;\n            for (let i = 0; i < newNumberArray.length; i++) {\n                row = newNumberArray[i];\n                for (let j = 0; j < row.length; j++) {\n                    if (row[j] === '') {\n                        emptyIndex = { rowIndex: i, colIndex: j };\n                        break; // Stop searching after finding the first empty string\n                    }\n                }\n                if (emptyIndex) {\n                    break; // Stop the outer loop as well\n                }\n            }\n\n            if (emptyIndex) {\n                if (guess === pascalsTriangle[emptyIndex.rowIndex][emptyIndex.colIndex]) {\n                    newNumberArray[emptyIndex.rowIndex][emptyIndex.colIndex] = guess;\n                    newNumberArray[emptyIndex.rowIndex][row.length - 1 - emptyIndex.colIndex] = guess;\n                    setNumberArray(newNumberArray)\n                    setGuess(\"\");\n                    if (newNumberArray.flat()[newNumberArray.flat().length - 7] === \"924\") {\n                        gameOver()\n                    }\n                } else if (guess.length === pascalsTriangle[emptyIndex.rowIndex][emptyIndex.colIndex].length) {\n                    badGuess();\n                }\n            }\n        }\n    }\n\n    const addNumber = (key) => {\n        let newGuess = guess.concat(key);\n        setGuess(newGuess);\n    }\n\n    const removeNumber = () => {\n        if (guess.length > 0) {\n            let newGuess = guess.slice(0, -1);\n            setGuess(newGuess);\n        }\n    }\n\n    useEffect(() => {\n        if (guess !== \"\") {\n            checkGuess();\n        }\n    }, [guess]);\n\n    const handleKeyboard = useCallback((event) => {\n        if (disableKeyPressRef.current) {\n            event.preventDefault();\n            return;\n        } else if (event.key === \"Backspace\") {\n            removeNumber()\n        } else if (event.key === \" \") {\n            setGameChosen({gameChosen: false, gameNumber: ''});\n        } else {\n            keys0.forEach((key) => {\n                if (event.key === key) {\n                    addNumber(key)\n            }});\n        }\n    });\n\n    useKeydownEffect(handleKeyboard, [handleKeyboard]);\n\n    return (\n        <div className=\"keyboard\" onKeyDown={handleKeyboard}>\n            <KeyboardPContext.Provider\n                value={{\n                addNumber,\n                numberArray,\n                pascalsTriangle, \n                guess, \n                xResponse}}>\n            <div className='line0'>{keys0.map((key, index) => {\n                const uniqueKey = `0-${index}`;\n                return <Key keyVal={key} key={uniqueKey} clickableKey={true} />;\n            })}</div>\n            <div className='line1'><Triangle /></div>\n            <div className='line2'>< Spacebar keyVal={symbolResponse} /></div>\n            </KeyboardPContext.Provider>\n        </div>\n    )\n\n}\n\nexport default KeyboardP","import React, { useContext } from 'react'\nimport { AppContext } from '../../App';\nimport { FaCheck } from '../IconModule';\n\nfunction Spacebar({ keyVal }) {\n  const { setGameChosen} = useContext(AppContext);\n  const selectLetter = () => {\n    setGameChosen({gameChosen: false, gameNumber: ''});\n  };\n\n  let iconComponent = null;\n  let iconColorClass = '';\n\n  if (keyVal === 'check') {\n    iconComponent = <FaCheck />;\n    iconColorClass = 'check-color';\n  }\n\n  return (\n      <div className={`key spacebar ${iconColorClass}`}  onClick={selectLetter}>\n        {iconComponent}\n      </div>\n    )\n}\n\nexport default Spacebar","import React, { useContext } from 'react'\nimport TriangleUnit from './TriangleUnitP';\nimport { KeyboardPContext } from './KeyboardP';\n\nfunction Triangle() {\n    const { numberArray, pascalsTriangle, guess, xResponse } = useContext(KeyboardPContext);\n\n    let newNumberArray = [...numberArray];\n    let emptyIndex = null;\n    let row = null;\n    if (numberArray.flat().includes(\"\")) {\n        for (let i = 0; i < newNumberArray.length; i++) {\n            row = newNumberArray[i];\n            for (let j = 0; j < row.length; j++) {\n                if (row[j] === '') {\n                    emptyIndex = { rowIndex: i, colIndex: j };\n                    break; // Stop searching after finding the first empty string\n                }\n            }\n            if (emptyIndex) {\n                break; // Stop the outer loop as well\n            }\n        }\n\n        if (emptyIndex) {\n            \n        }\n    }\n\n    \n    return (\n        <div className='hundreds_box'>\n            {numberArray.map((row, rowIndex) => (\n                <div className='mini_line1' key={rowIndex}>\n                    {row.map((value, colIndex) => {\n                        const testIndex = {rowIndex: rowIndex, colIndex: colIndex}\n                        const keyVal = emptyIndex &&\n                        (testIndex.rowIndex === emptyIndex.rowIndex && testIndex.colIndex === emptyIndex.colIndex || testIndex.rowIndex === emptyIndex.rowIndex && testIndex.colIndex === row.length - 1 - emptyIndex.colIndex)\n                            ? xResponse || guess\n                            : value;\n                        return (\n                        <TriangleUnit key={colIndex} \n                        keyVal={keyVal}\n                        correct={value !== \"\"}\n                        column={testIndex.colIndex} />\n                    )})}\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default Triangle","import React from 'react'\nimport { FaTimes } from '../IconModule';\n\nfunction TriangleUnit( { keyVal, correct, column } ) {\n\n    let blueLevel = 255 - (10 * column);\n    let redLevel = 80 + (15 * column);\n    let greenLevel = 200 - (5 * column);\n\n    let iconComponent = null;\n\n    if (keyVal === 'times') {\n        iconComponent = <FaTimes />;\n    } else {\n        iconComponent = keyVal;\n    }\n\n    return (\n        <div className= 'key triangle_key' \n        style={correct ? {backgroundColor: `rgb(${redLevel}, ${greenLevel}, ${blueLevel})`} : undefined} >\n            {iconComponent}\n        </div>\n    )\n}\n\nexport default TriangleUnit"],"names":["_ref","keyVal","clickableKey","dark","addNumber","symbol","useContext","KeyboardPContext","_jsx","className","onClick","children","createContext","_useContext","AppContext","setGameChosen","keysColor","setKeysColor","keys0","_useState","useState","_useState2","_slicedToArray","guess","setGuess","_useState3","_useState4","numberArray","setNumberArray","pascalsTriangle","_useState5","_useState6","symbolResponse","setSymbolResponse","_useState7","_useState8","xResponse","setXResponse","disableKeyPressRef","useRef","checkGuess","newNumberArray","_toConsumableArray","flat","includes","emptyIndex","row","i","length","j","rowIndex","colIndex","current","setTimeout","newKeysColor","gameChosen","gameNumber","key","newGuess","concat","useEffect","handleKeyboard","useCallback","event","preventDefault","slice","removeNumber","forEach","useKeydownEffect","onKeyDown","_jsxs","Provider","value","map","index","uniqueKey","Key","Triangle","Spacebar","iconComponent","iconColorClass","FaCheck","testIndex","TriangleUnit","correct","column","blueLevel","redLevel","greenLevel","FaTimes","style","backgroundColor","undefined"],"sourceRoot":""}
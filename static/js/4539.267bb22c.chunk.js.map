{"version":3,"file":"static/js/4539.267bb22c.chunk.js","mappings":"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","sources":["components/GameK/KeyK.js","components/GameK/KeyboardK.js","components/GameK/SpacebarK.js"],"sourcesContent":["import React, { useContext } from 'react'\nimport { KeyboardKContext } from './KeyboardK';\nimport { GiSandSnake, GiPear, GiCastle, GiShirtButton, GiSewingString } from 'react-icons/gi';\nimport { BsIndent, BsArrowDown, BsArrowUp, BsFillSignTurnLeftFill } from 'react-icons/bs';\nimport { TbHexagonLetterA, TbHexagonLetterD, TbHexagonLetterE, TbHexagonLetterB } from 'react-icons/tb';\nimport { PiNumberOneBold, PiPeaceBold, PiNumberSquareTwoBold } from 'react-icons/pi';\nimport { FaCheck, FaChessPawn, FaChessKnight, FaChessBishop, FaChessRook, FaChessQueen, FaChessKing, FaRegClock, FaChess, FaBalanceScaleLeft, FaMale } from 'react-icons/fa';\nimport { BiSolidChess, BiSolidLock } from 'react-icons/bi';\nimport { ImClubs } from 'react-icons/im';\n\n\nfunction Key({ keyVal, keyLine, guessKey }) {\n  const { addLetter, removeLetter } = useContext(KeyboardKContext);\n  const selectLetter = () => {\n    if (keyLine === 1 || keyLine === 2 || keyLine === 3) {\n      addLetter(keyVal);\n    } else if (keyLine === 0) {\n      removeLetter();\n    };\n  };\n\n  let iconComponent = null;\n\n  if (keyVal === 'one') {\n    iconComponent = <PiNumberOneBold />;\n  } else if (keyVal === 'snake') {\n    iconComponent = <GiSandSnake />; \n  } else if (keyVal === 'a') {\n    iconComponent = <TbHexagonLetterA />; \n  } else if (keyVal === 'pawn') {\n    iconComponent = <FaChessPawn />; \n  } else if (keyVal === 'clock') {\n    iconComponent = <FaRegClock />; \n  } else if (keyVal === 'in') {\n    iconComponent = <BsIndent />; \n  } else if (keyVal === 'chess') {\n    iconComponent = <FaChess />; \n  } else if (keyVal === 'club') {\n    iconComponent = <ImClubs />; \n  } else if (keyVal === 'down') {\n    iconComponent = <BsArrowDown />; \n  } else if (keyVal === 'peace') {\n    iconComponent = <PiPeaceBold />; \n  } else if (keyVal === 'board') {\n    iconComponent = <BiSolidChess />; \n  } else if (keyVal === 'bishop') {\n    iconComponent = <FaChessBishop />; \n  } else if (keyVal === 'pear') {\n    iconComponent = <GiPear />; \n  } else if (keyVal === 'e') {\n    iconComponent = <TbHexagonLetterE />; \n  } else if (keyVal === 'd') {\n    iconComponent = <TbHexagonLetterD />; \n  } else if (keyVal === 'up') {\n    iconComponent = <BsArrowUp />; \n  } else if (keyVal === 'queen') {\n    iconComponent = <FaChessQueen />; \n  } else if (keyVal === 'two') {\n    iconComponent = <PiNumberSquareTwoBold />; \n  } else if (keyVal === 'check') {\n    iconComponent = <FaCheck />; \n  } else if (keyVal === 'castle') {\n    iconComponent = <GiCastle />; \n  } else if (keyVal === 'king') {\n    iconComponent = <FaChessKing />; \n  } else if (keyVal === 'button') {\n    iconComponent = <GiShirtButton />; \n  } else if (keyVal === 'rook') {\n    iconComponent = <FaChessRook />; \n  } else if (keyVal === 'b') {\n    iconComponent = <TbHexagonLetterB />; \n  } else if (keyVal === 'lock') {\n    iconComponent = <BiSolidLock />; \n  } else if (keyVal === 'weigh') {\n    iconComponent = <FaBalanceScaleLeft />; \n  } else if (keyVal === 'sew') {\n    iconComponent = <GiSewingString />; \n  } else if (keyVal === 'knight') {\n    iconComponent = <FaChessKnight />;\n  } else if (keyVal === 'turn') {\n    iconComponent = <BsFillSignTurnLeftFill />; \n  } else if (keyVal === 'mate') {\n    iconComponent = <FaMale />; \n  } else {\n    iconComponent = keyVal;\n  };\n\n  return (\n      <div className={ guessKey ? 'key guess_key' : 'key' } onClick={selectLetter}>\n        {iconComponent}\n      </div>\n    )\n}\n\nexport default Key","import React, { useCallback, useContext, useEffect, useState, createContext, useRef } from 'react';\nimport { AppContext } from '../../App';\nimport { useKeydownEffect } from '../../utils';\nimport Key from './KeyK';\nimport Spacebar from './SpacebarK';\n\nexport const KeyboardKContext = createContext();\n\nfunction KeyboardK() {\n    const { setGameChosen, keysColor, setKeysColor } = useContext(AppContext);\n    const [keys0, setKeys0] = useState([\"one\", \"one\", \"snake\", \"snake\", \" \", \"a\", \"pawn\", \"pawn\", \"pawn\", \" \", \"a\", \" \", \"clock\", \"clock\", \"clock\", \"clock\"]);\n    const keys1 = [\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"];\n    const keys2 = [\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\"];\n    const keys3 = [\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\"];\n\n    const fauxKeys0 = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]\n    const allKeys = [keys1, keys2, keys3]\n\n    const [noteList, setNoteList] = useState([])\n\n    const codeWords = [\n        [\"one\", \"one\", \"snake\", \"snake\", \" \", \"a\", \"pawn\", \"pawn\", \"pawn\", \" \", \"a\", \" \", \"clock\", \"clock\", \"clock\", \"clock\"], \n        [ \"@\", \"@\", \" \", \"chess\", \"chess\", \"chess\", \"chess\", \"chess\", \" \", \"club\", \"club\", \"club\", \"club\"],\n        [\"down\", \"down\", \"down\", \"down\", \" \", \"a\", \" \", \"peace\", \"peace\", \"peace\", \"peace\", \"peace\"],\n        [\"a\", \" \", \"board\", \"board\", \"board\", \"board\", \"board\", \" \", \"bishop\", \"bishop\", \"bishop\", \"bishop\", \"bishop\", \"bishop\"],\n        [\"pear\", \"pear\", \"pear\", \"pear\", \"e\", \"d\", \" \", \"up\", \"up\"],\n        [\"W\", \"I\", \"T\", \"H\", \" \", \"a\", \" \", \"queen\", \"queen\", \"queen\", \"queen\", \"queen\"],\n        [\"two\", \"two\", \" \", \"check\", \"check\", \"check\", \"check\", \"check\", \"mate\", \"mate\", \"mate\", \"mate\"],\n        [\"a\", \" \", \"castle\", \"castle\", \"castle\", \"castle\", \"castle\", \"castle\", \"d\", \" \", \"king\", \"king\", \"king\", \"king\"],\n        [\"button\", \"button\", \"button\", \" \", \"two\", \"two\", \"two\", \" \", \"rook\", \"rook\", \"rook\", \"rook\", \"rook\"],\n        ['b', 'lock', 'lock', 'lock', 'lock', 'e', 'd', \" \", \"T\", \"H\", \"E\", \"I\", \"R\", \" \", \"weigh\", \"weigh\", \"weigh\"],\n        [\"sew\", \"sew\", \" \", \"one\", \"one\", \"one\", \" \", \"knight\", \"knight\", \"knight\", \"knight\", \"knight\"],\n        [\"T\", \"H\", \"E\", \"Y\", \" \", \"turn\", \"turn\", \"turn\", \"turn\", \"e\", \"d\", \" \", \"a\", \" \", \"pawn\", \"pawn\", \"pawn\", \"pawn\"],\n        [\"in\", \"in\", \"two\", \"two\", \" \", \"a\", \" \", \"queen\", \"queen\", \"queen\", \"queen\", \"queen\"],\n        [\"check\", \"check\", \"check\", \"check\", \"check\", \"mate\", \"mate\", \"mate\", \"mate\"],\n        [\"\"]\n    ];\n\n    const realWords = [\n        \"ONCE UPON A TIME\", \n        \"AT CHESS CLUB\",\n        \"DOWN A PIECE\",\n        \"A BORED BISHOP\",\n        \"PAIRED UP\", \n        \"WITH A QUEEN\",\n        \"TO CHECKMATE\",\n        \"A CASTLED KING\",\n        \"BUT TWO ROOKS\",\n        \"BLOCKED THEIR WAY\",\n        \"SO ONE NIGHT\",\n        \"THEY TURNEDA PAWN\", \n        \"INTO A QUEEN\", \n        \"CHECKMATE\"\n    ];\n\n    const alternateWords = [\n        \"ONCE UPON A TIME\", \n        \"AT CHESS CLUB\",\n        \"DOWN A PEACE\",\n        \"A BOARD BISHOP\",\n        \"PEARED UP\", \n        \"WITH A QUEEN\",\n        \"TO CHECKMATE\",\n        \"A CASTLED KING\",\n        \"BUT TWO ROOKS\",\n        \"BLOCKED THEIR WAY\",\n        \"SO ONE NIGHT\",\n        \"THEY TURNED A PAWN\", \n        \"INTO A QUEEN\", \n        \"CHECKMATE\"\n    ];\n\n    const note = [\n        \"Once upon a time, \",\n        \"at chess club... \",\n        \"Down a piece, \",\n        \"a bored bishop \", \n        \"paired up \",\n        \"with a queen \",\n        \"to checkmate \",\n        \"a castled king. \",\n        \"But two rooks \",\n        \"blocked their way. \",\n        \"So one night \",\n        \"they turned a pawn \",\n        \"into a queen. \",\n        \"Checkmate.\",\n    ];\n\n    const letters = [\n        \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \n        \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \n        \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n    ];\n\n    const [counter, setCounter] = useState(0)\n\n    const [symbolResponse, setSymbolResponse] = useState(\"\")\n\n    const disableKeyPressRef = useRef(false);\n\n    const gameOver = () => {\n        let newKeysColor = [...keysColor];\n        newKeysColor[2][7] = 1;\n        setKeysColor(newKeysColor);\n        setGameChosen({ gameChosen: false, gameNumber: '' });\n    }\n\n    const goodWord = () => {\n        setSymbolResponse(\"check\");\n        disableKeyPressRef.current = true;\n        \n        setNoteList((prevNoteList) => {\n            const newNoteList = [...prevNoteList];\n            newNoteList.push(note[counter]);\n            return newNoteList;\n        });\n\n        setCounter((prevCounter) => prevCounter + 1);\n\n        setTimeout(() => {\n            if (counter < 13){\n                setKeys0(codeWords[counter + 1]);\n            }\n            setSymbolResponse(\"\");\n            disableKeyPressRef.current = false;\n            if (counter === 13) {\n                gameOver()\n            }\n        }, 1000);\n    }\n\n    const badWord = () => {\n        setSymbolResponse(\"times\");\n        disableKeyPressRef.current = true;\n        setTimeout(() => {\n            setKeys0(codeWords[counter]);\n            setSymbolResponse(\"\");\n            disableKeyPressRef.current = false;\n        }, 1000);\n    }\n    \n    const addLetter = (key) => {\n        let updatedKeys = [...keys0];\n        const emptyIndex = updatedKeys.findIndex((val) => !letters.includes(val) && val !== \" \");\n        if (emptyIndex >= 0) {\n            updatedKeys[emptyIndex] = key.toUpperCase();        \n        }\n        setKeys0(updatedKeys);\n    }\n\n    const removeLetter = () => {\n        let updatedKeys = [...keys0];\n        const emptyIndex = updatedKeys.findIndex((val) => !letters.includes(val) && val !== \" \");\n        if (emptyIndex > 0) {\n            if (updatedKeys[emptyIndex - 1] === \" \") {\n                updatedKeys[emptyIndex - 2] = codeWords[counter][emptyIndex - 2];\n            } else {\n                updatedKeys[emptyIndex - 1] = codeWords[counter][emptyIndex - 1];\n            }\n        }\n        setKeys0(updatedKeys);\n    }\n\n    const checkWord = () => {\n        if (keys0.some((val) => !letters.includes(val) && val !== \" \")) return;\n        if (keys0.join('') === realWords[counter] || keys0.join('') === alternateWords[counter]) {\n            goodWord()\n        } else {\n            badWord()\n        }\n    }\n\n    useEffect(() => {\n        checkWord()\n    }, [keys0]);\n\n    const handleKeyboard = useCallback((event) => {\n\n        if (disableKeyPressRef.current) {\n            event.preventDefault();\n            return;\n        } else if (event.key === \"Backspace\") {\n            removeLetter()\n        } else if (event.key === \" \") {\n            setGameChosen({gameChosen: false, gameNumber: ''});\n        } else {\n            fauxKeys0.forEach((key) => {\n                if (event.key.toUpperCase() === key.toUpperCase()) {\n                    removeLetter()\n                }            \n            });\n            for (const keys of allKeys) {\n              for (const key of keys) {\n                if (event.key.toLowerCase() === key.toLowerCase()) {\n                  addLetter(key);\n                  break;\n                }\n              }\n            }\n          }\n    }, [fauxKeys0, allKeys]);\n\n    useKeydownEffect(handleKeyboard, [handleKeyboard]);\n\n    return (\n        <div className=\"keyboard\" onKeyDown={handleKeyboard}>\n            <KeyboardKContext.Provider\n                value={{\n                addLetter,\n                removeLetter\n                }}>\n            <div className='line0'>{keys0.map((key, index) => {\n                const uniqueKey = `0-${index}`;\n                return <Key keyVal={key} key={uniqueKey} keyLine={0} guessKey />;\n            })}</div>\n            <div className='line1'>{keys1.map((key, index) => {\n                const uniqueKey = `1-${index}`;\n                return <Key keyVal={key} key={uniqueKey} keyLine={1} />;\n            })}</div>\n            <div className='line2'>\n                {keys2.map((key, index) => {\n                const uniqueKey = `2-${index}`;\n                return <Key keyVal={key} key={uniqueKey} keyLine={2} />;\n            })}</div>\n            <div className='line3'>{keys3.map((key, index) => {\n                const uniqueKey = `3-${index}`;\n                return <Key keyVal={key} key={uniqueKey} keyLine={3} />;\n            })}</div>\n            <div className='line4'>< Spacebar keyVal={symbolResponse} /></div>\n            <div className=\"note_box\">\n                {noteList.slice(0, counter).map((line, index) => (\n                <p key={index} className=\"word_box_word\">{line}</p>\n            ))}</div>\n            </KeyboardKContext.Provider>\n        </div>\n    )\n\n}\n\nexport default KeyboardK","import React, { useContext } from 'react'\nimport { AppContext } from '../../App';\nimport { FaCheck, FaTimes } from '../IconModule';\n\nfunction Spacebar({ keyVal }) {\n  const { setGameChosen} = useContext(AppContext);\n  const selectLetter = () => {\n    setGameChosen({gameChosen: false, gameNumber: ''});\n    };\n\n    let iconComponent = null;\n    let iconColorClass = '';\n\n    if (keyVal === 'check') {\n      iconComponent = <FaCheck />;\n      iconColorClass = 'check-color';\n    } else if (keyVal === 'times') {\n      iconComponent = <FaTimes />;\n      iconColorClass = 'times-color';\n  }\n\n  return (\n      <div className={`key spacebar ${iconColorClass}`}  onClick={selectLetter}>\n        {iconComponent}\n      </div>\n    )\n}\n\nexport default Spacebar"],"names":["_ref","keyVal","keyLine","guessKey","_useContext","useContext","KeyboardKContext","addLetter","removeLetter","iconComponent","_jsx","PiNumberOneBold","GiSandSnake","TbHexagonLetterA","FaChessPawn","FaRegClock","BsIndent","FaChess","ImClubs","BsArrowDown","PiPeaceBold","BiSolidChess","FaChessBishop","GiPear","TbHexagonLetterE","TbHexagonLetterD","BsArrowUp","FaChessQueen","PiNumberSquareTwoBold","FaCheck","GiCastle","FaChessKing","GiShirtButton","FaChessRook","TbHexagonLetterB","BiSolidLock","FaBalanceScaleLeft","GiSewingString","FaChessKnight","BsFillSignTurnLeftFill","FaMale","className","onClick","children","createContext","AppContext","setGameChosen","keysColor","setKeysColor","_useState","useState","_useState2","_slicedToArray","keys0","setKeys0","keys1","keys2","keys3","fauxKeys0","allKeys","_useState3","_useState4","noteList","setNoteList","codeWords","realWords","alternateWords","note","letters","_useState5","_useState6","counter","setCounter","_useState7","_useState8","symbolResponse","setSymbolResponse","disableKeyPressRef","useRef","goodWord","current","prevNoteList","newNoteList","_toConsumableArray","push","prevCounter","setTimeout","newKeysColor","gameChosen","gameNumber","gameOver","key","updatedKeys","emptyIndex","findIndex","val","includes","toUpperCase","checkWord","some","join","useEffect","handleKeyboard","useCallback","event","preventDefault","forEach","_i","_allKeys","length","_step","keys","_iterator","_createForOfIteratorHelper","s","n","done","value","toLowerCase","err","e","f","useKeydownEffect","onKeyDown","_jsxs","Provider","map","index","uniqueKey","concat","Key","Spacebar","slice","line","iconColorClass","FaTimes"],"sourceRoot":""}